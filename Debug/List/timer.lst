###############################################################################
#
# IAR C/C++ Compiler V6.30.1.934/W32 for MSP430           15/Jul/2015  07:36:39
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430
#    Source file   =  
#        U:\LightCloud - Occupancy Sensor\17 - Firmware\LC_OS_REV01\timer.c
#    Command line  =  
#        "U:\LightCloud - Occupancy Sensor\17 - Firmware\LC_OS_REV01\timer.c"
#        -D LC_OCCUPANCY -D OS_TEST_MODE -lcN "U:\LightCloud - Occupancy
#        Sensor\17 - Firmware\LC_OS_REV01\Debug\List\" -o "U:\LightCloud -
#        Occupancy Sensor\17 - Firmware\LC_OS_REV01\Debug\Obj\" --debug
#        -D__MSP430i2041__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430fn.h" -Ohz
#        --multiplier=16s --segment __data16=DATA16 --segment __data20=DATA20
#    List file     =  
#        U:\LightCloud - Occupancy Sensor\17 -
#        Firmware\LC_OS_REV01\Debug\List\timer.lst
#    Object file   =  
#        U:\LightCloud - Occupancy Sensor\17 -
#        Firmware\LC_OS_REV01\Debug\Obj\timer.r43
#
###############################################################################

U:\LightCloud - Occupancy Sensor\17 - Firmware\LC_OS_REV01\timer.c
      1          /*****************************************************************************
      2          *
      3          *   File name: timer.c
      4          *
      5          *   LC - Controller
      6          *   Initialize timer and timer service routine
      7          *
      8          *****************************************************************************/
      9          #include  <stdbool.h>
     10          #include "msp430.h"
     11          #include "io.h"
     12          #include "timer.h"
     13          #include "global.h"
     14          #include "dim.h"
     15          
     16          unsigned int countsec=0, AssoCounter=0, SsCounter=0;
     17          unsigned char count_8ms=0, radioInitDelay, led_30s_19_delay;
     18          unsigned int radioResponseDelay = 0;
     19          unsigned int led_rvpkt_delay=0, led_30s_1s_delay=0, led_1s_delay=0,led_30s_2s_delay, led_2s_delay, led_30s_05s_delay, led_05s_delay, led_1s_9s_delay, led_9s_1s_delay;
     20          bool msflag=0, radioInitflag=0;
     21          unsigned int power_t0, power_t1;
     22          
     23          void delay_second(unsigned int cnts)
     24          {
     25            countsec = 250*cnts;
     26            while(countsec);
     27          }
     28          
     29          /****************************************************************
     30          *
     31          * Function: timer_init
     32          *
     33          * Description: timer Initialization
     34          * Initialize timer period and source clock
     35          *
     36          *****************************************************************/
     37          
     38          // Timer A0 Initialization
     39          void timer_init()
     40          {
     41          #ifdef LC_CONTROLLER
     42            P2SEL0 |= BIT6;                       // P2.6 CCRx Function
     43            P2DIR  |= BIT6;                       // Set P2.6 as output
     44              
     45            //TA0CTL = TASSEL_2 | MC_1 | ID_3;    // SMCLK/8 = 2.048Mhz,UpMode
     46            TA0CTL = TASSEL_2 | MC_2 | ID_0;      // SMCLK = 16.384Mhz,ContMode
     47            TA0CCTL0 = CCIE;                      // Enable CCR0 Periodic interrupt,compare mode
     48            TA0CCR0 = TIMER_FREQ;                 // Timer0 Base Freq = 250Hz
     49            TA0CCTL1 = OUTMOD_PWM;                // Output mode: reset/set
     50            TA0CCR1 = 0;                          // PWM duty cycle register setup
     51            
     52          #elif  LC_OCCUPANCY
     53            P1SEL1 |= BIT5;                       // P1.5 CCRx Function
     54            P1DIR  |= BIT5;                       // Set P1.5 as output
     55            
     56            //TA0CTL = TASSEL_2 | MC_1 | ID_3;    // SMCLK/8 = 2.048Mhz,UpMode
     57            TA0CTL = TASSEL_2 | MC_2 | ID_0;      // SMCLK = 16.384Mhz,ContMode
     58            TA0CCTL0 = CCIE;                      // Enable CCR0 Periodic interrupt,compare mode
     59            TA0CCR0 = TIMER_FREQ;                 // Timer0 Base Freq = 250Hz
     60            TA0CCTL1 = OUTMOD_PWM;                // Output mode: reset/set
     61            TA0CCR1 = 0;                          // PWM duty cycle register setup
     62          #endif
     63          
     64            radioInitDelay = RADIOINITDELAY;      // radio initialize delay
     65          }
     66          
     67          /******************************************************
     68          // Timer A0 interrupt service routine @ 250hz, 4ms
     69          ******************************************************/
     70          #pragma vector=TIMER0_A0_VECTOR
     71          __interrupt void TA0_ISR(void)
     72          {
     73             switch(__even_in_range(TA0IV,TA0IV_TAIFG)) {
     74                  case TA0IV_NONE:
     75                    if(count_8ms) count_8ms--;            // main loop 8ms timer
     76                    
     77                    if(countsec)
     78                      countsec--;                         // count 100ms timer
     79                    else{
     80                      countsec = 25;
     81                      if(AssoCounter)AssoCounter--;       // ask for associate timer
     82                      if(SsCounter)SsCounter--;           // ask for signal strength timer
     83                      if(radioResponseDelay) radioResponseDelay--;// radio response time out        
     84                      if(radioInitDelay) radioInitDelay--;
     85                      else radioInitflag = true;
     86                    }
     87                    
     88                    // signal strength level LEDs state, default all off
     89                    if(led_rvpkt_delay){
     90                      switch(StrengthLevel){
     91                        case 1:
     92                          LED_B3_ON;
     93                          break;
     94                        case 2:  
     95                          LED_B3_ON;
     96                          LED_B2_ON;
     97                          break;
     98                        case 3:
     99                          LED_B1_ON;
    100                          LED_B2_ON;
    101                          LED_B3_ON;
    102                          break;
    103                        default:
    104                          LED_B1_OFF;
    105                          LED_B2_OFF;
    106                          LED_B3_OFF;
    107                          break;
    108                      }
    109                      led_rvpkt_delay--;
    110                    }
    111                    else{
    112                      LED_B1_OFF;
    113                      LED_B2_OFF;
    114                      LED_B3_OFF;
    115                    }
    116                    
    117                    // identity packet w/feedback, blink white LED every 1sec for 30s
    118                    if(led_30s_1s_delay){
    119                      if(led_1s_delay)
    120                        led_1s_delay--;
    121                      else {
    122                        led_30s_1s_delay--;
    123                        led_1s_delay = TIMER_1S;
    124                        LED_W_TOGGLE;
    125                      }
    126                    }
    127                    else 
    128                      led_1s_delay = 0;
    129                    
    130                    // identity packet w/actuator feedback, blink and toggle relay every 2 sec for 30s
    131                    if(led_30s_2s_delay){
    132                      if(led_2s_delay)
    133                        led_2s_delay--;
    134                      else {
    135                        led_2s_delay = TIMER_2S;
    136                        LED_W_TOGGLE;
    137                        if(RLY_READ == 0){ // Actuator Hard ON
    138                          if(led_30s_2s_delay == 1)TA0CCR1 = CurrentLevel;
    139                          else TA0CCR1 = PWM_FREQ;
    140                          RLY_ON;
    141                        }
    142                        else { // Actuator Hard OFF
    143                          TA0CCR1 = 0;
    144                          RLY_OFF;
    145                        }
    146                        led_30s_2s_delay--;
    147                      }
    148                    }
    149                    else
    150                      led_2s_delay = 0;
    151                    
    152                    // network reset flash white LED every 0.5s for 30s
    153                    if(led_30s_05s_delay){
    154                      if(led_05s_delay)
    155                        led_05s_delay--;
    156                      else {
    157                        led_30s_05s_delay--;
    158                        led_05s_delay = TIMER_05S;
    159                        LED_W_TOGGLE;
    160                      }
    161                    }
    162                    else
    163                      led_05s_delay = 0;
    164                    
    165                    // associate red LED 1s ON 9s OFF
    166                    if(AssoFlag==0){
    167                      LED_G_OFF;
    168                      if(led_1s_9s_delay){
    169                          led_1s_9s_delay--;
    170                          LED_R_ON;
    171                      }
    172                      else if(led_9s_1s_delay){
    173                          LED_R_OFF;
    174                          led_9s_1s_delay--;
    175                      }
    176                      else {
    177                          led_1s_9s_delay = TIMER_1S;
    178                          led_9s_1s_delay = TIMER_9S;
    179                      }
    180                    }
    181                    else{
    182                      LED_R_OFF;
    183                      LED_G_ON;
    184                    }
    185                          
    186          
    187          #ifdef LC_OCCUPANCY
    188          /*******************************************************************************
    189                                      PIR sensor
    190          *******************************************************************************/
    191          /*                          PIR Variables                                     */
    192                    
    193                    
    194          /******************************************************************************
    195          *	               	 counters                                              *
    196          *******************************************************************************/
    197                    if(pir_tic) pir_tic--;					        //conter for PIR sensor
    198                    if(led_green1_tic) led_green1_tic--;			                //conter for led
    199                    if(current_triger_delay){
    200                      if(!current_triger_delay_counter){
    201                        current_triger_delay_counter= TIMER_1S;			        //couter for ocupansy triger delay after detection            
    202                      }
    203                      if(current_triger_delay_counter){
    204                        current_triger_delay_counter--;                                   //couter for ocupansy triger delay after detection          
    205                      }
    206                    }
    207                    if(current_triger_delay && (!current_triger_delay_counter))
    208                      current_triger_delay--;
    209          #endif               
    210                    
    211                    break;
    212                  case TA0IV_TACCR1:break;
    213                  case TA0IV_TACCR2:break;
    214                  case TA0IV_TAIFG: break;
    215                  default: break;
    216              }
    217          }
    218          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     14   TA0_ISR
      4   delay_second
      2   timer_init


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  ?Subroutine0
       2  AssoCounter
       2  SsCounter
       2  TA0CCR0
       2  TA0CCR1
       2  TA0CCTL0
       2  TA0CCTL1
       2  TA0CTL
       2  TA0IV
     456  TA0_ISR
       2  TA0_ISR::??INTVEC 12
       2  _A_PADIR_L
       2  _A_PAIN_L
       2  _A_PAOUT_L
       2  _A_PASEL1_L
       1  count_8ms
       2  countsec
      32  delay_second
       2  led_05s_delay
       2  led_1s_9s_delay
       2  led_1s_delay
       2  led_2s_delay
       2  led_30s_05s_delay
       1  led_30s_19_delay
       2  led_30s_1s_delay
       2  led_30s_2s_delay
       2  led_9s_1s_delay
       2  led_rvpkt_delay
       1  msflag
       2  power_t0
       2  power_t1
       1  radioInitDelay
       1  radioInitflag
       2  radioResponseDelay
      46  timer_init

 
 548 bytes in segment CODE
  20 bytes in segment DATA16_AN
  35 bytes in segment DATA16_Z
   2 bytes in segment INTVEC
 
 548 bytes of CODE  memory
   0 bytes of CONST memory (+  2 bytes shared)
  35 bytes of DATA  memory (+ 20 bytes shared)

Errors: none
Warnings: none
