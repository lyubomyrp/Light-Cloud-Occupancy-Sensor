###############################################################################
#
# IAR C/C++ Compiler V6.30.1.934/W32 for MSP430           15/Jul/2015  07:36:38
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430
#    Source file   =  
#        U:\LightCloud - Occupancy Sensor\17 - Firmware\LC_OS_REV01\adc.c
#    Command line  =  
#        "U:\LightCloud - Occupancy Sensor\17 - Firmware\LC_OS_REV01\adc.c" -D
#        LC_OCCUPANCY -D OS_TEST_MODE -lcN "U:\LightCloud - Occupancy Sensor\17
#        - Firmware\LC_OS_REV01\Debug\List\" -o "U:\LightCloud - Occupancy
#        Sensor\17 - Firmware\LC_OS_REV01\Debug\Obj\" --debug -D__MSP430i2041__
#        -e --double=32 --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.2\430\lib\dlib\dl430fn.h" -Ohz
#        --multiplier=16s --segment __data16=DATA16 --segment __data20=DATA20
#    List file     =  
#        U:\LightCloud - Occupancy Sensor\17 -
#        Firmware\LC_OS_REV01\Debug\List\adc.lst
#    Object file   =  
#        U:\LightCloud - Occupancy Sensor\17 -
#        Firmware\LC_OS_REV01\Debug\Obj\adc.r43
#
###############################################################################

U:\LightCloud - Occupancy Sensor\17 - Firmware\LC_OS_REV01\adc.c
      1          /*****************************************************************************
      2          *
      3          *   File name: adc.c
      4          *
      5          *   LC - Controller
      6          *   Initialize SD24 Initialization
      7          *   Gain up to 16x, input range Vfsr = Vref/Gain, Oversampling ratio up to 256
      8          *
      9          *****************************************************************************/
     10          #include <inttypes.h>
     11          #include  <stdbool.h>
     12          #include "msp430.h"
     13          #include "io.h"
     14          #include "adc.h"
     15          #include "global.h"
     16          #include "serial.h"
     17          #define ADC_DEF
     18          #include "lcp.h"
     19          #include "lcp_constants.h"
     20          
     21          /*! The minimum value which the ADCs can produce. */
     22          #define V_ADC_MIN                       -31000
     23          #define I_ADC_MIN                       (-31000L*256L)
     24          /*! The maximum value which the ADCs can produce. */
     25          #define V_ADC_MAX                       31000
     26          #define I_ADC_MAX                       (31000L*256L)
     27          #define ENDSTOP_HITS_FOR_OVERLOAD       20 //fast overload tolerance times
     28          #define SAMPLE_RATE                     134//(39062UL) - 1s sample
     29          #define REPORT_RATE                     3600 // - 1min report
     30          #define V_SCALE_FACTOR                  24022
     31          #define TRIGGER_THRESHOLD_H             500 // 50mA
     32          #define TRIGGER_THRESHOLD_L             200
     33          
     34          
     35          bool ADCInitFlag = 1, TriggerFlag = 0; 
     36          unsigned char V_endstops = ENDSTOP_HITS_FOR_OVERLOAD, *current_freq_ptr;
     37          char iV_history_index;
     38          uint16_t index_a=0, report_cycle = 0, index_f=0, tV, tI;
     39          uint16_t vfreq_counter_buf, freq_counter=0, vfreq_counter_history=0, ifreq_counter_buf, ifreq_counter_history=0;
     40          int16_t iV, iI, iV_dc=0, iV_diff, iI_dc, iV_max=0, iV_min=0, iI_max=0, iI_min=0, V_init_estimate_dc = 34, iV_history, iI_history, iVh[134];
     41          int32_t tV_accum, tI_accum, iP_mpy;
     42          uint64_t iV_mpy, iI_mpy, iV_accum, iI_accum;
     43          uint32_t iV_div, iV_sqrt, iI_div, iI_sqrt, tP;
     44          //uint16_t tV_accum[3], tV_accum_history[3];
     45          uint16_t send_V, send_I, send_P, send_F, send_PF, send_THD;
     46          /*
     47          int32_t dc_filter16_init(int16_t x)
     48          {
     49              return((int32_t) x << 16);
     50          }
     51          
     52          int16_t dc_filter16(int32_t y, int16_t x)
     53          {
     54              y += ((((int32_t) x << 16) - y) >> 14);
     55              x -= (y >> 16);
     56              return x;
     57          }
     58          
     59          void sqac48_16(register int16_t z[3], register int16_t x)
     60          {
     61              int64_t tmp;
     62          
     63              tmp = z[2];
     64              tmp = tmp << 16;
     65              tmp |= z[1];
     66              tmp = tmp << 16;
     67              tmp |= z[0];
     68              tmp += (int32_t) x*(int32_t) x;
     69              z[2] = (tmp >> 32) & 0xFFFF;
     70              z[1] = (tmp >> 16) & 0xFFFF;
     71              z[0] = tmp & 0xFFFF;
     72          }
     73          
     74          int32_t div48(int16_t x[3], int16_t y)
     75          {
     76              // Divide a 16 bit integer into a 48 bit one. Expect the answer to be no
     77              // greater than 32 bits, so return the answer as a 32 bit integer.
     78              // A somewhat domain specific divide operation, but pretty useful when
     79              // handling dot products.
     80              int32_t x1;
     81              int32_t z;
     82          
     83              // Avoid any divide by zero trouble
     84              if (y == 0)
     85                  return 0;
     86              x1 = x[2]%y;
     87              x1 <<= 16;
     88              x1 |= (uint16_t) x[1];
     89              z = x1/y;
     90              x1 = x1%y;
     91              x1 <<= 16;
     92              x1 |= (uint16_t) x[0];
     93              z = (z << 16) + x1/y;
     94              return z;
     95          }
     96          
     97          unsigned long isqrt32(uint32_t h)
     98          {
     99              uint32_t x;
    100              uint32_t y;
    101              int i;
    102          
    103              x = 0x80000000;
    104              y = 0;
    105              for (i = 0;  i < 32;  i++)
    106              {
    107                  x = (x << 1) | 1;
    108                  if (y < x)
    109                      x -= 2;
    110                  else
    111                      y -= x;
    112                  x++;
    113                  y <<= 1;
    114                  if ((h & 0x80000000))
    115                      y |= 1;
    116                  h <<= 1;
    117                  y <<= 1;
    118                  if ((h & 0x80000000))
    119                      y |= 1;
    120                  h <<= 1;
    121              }
    122          
    123              return  x;
    124          }
    125          
    126          uint32_t mul48u_32_16(uint32_t x, uint16_t y)
    127          {
    128              uint64_t z;
    129              
    130              z = (int64_t) x*(int64_t) y;
    131              return z >> 16;
    132          }
    133          */
    134          /*void v_rms_calc(void)
    135          {
    136              tmp = div48(tV_accum_history,134);
    137              tV = isqrt32(tmp);
    138              tV = mul48u_32_16(tV, V_SCALE_FACTOR) >> 10;
    139              tV = tV;
    140          }*/
    141          
    142          /*void v_rms_calc(void)
    143          {
    144            if(report_cycle == REPORT_RATE){
    145              report_cycle = 0;
    146              send_V = tV_accum/14220;    //237.12;
    147              send_I = tI_accum/24000;    //400.23;
    148              send_P = send_V * send_I;
    149              tI_accum = 0;
    150              tV_accum = 0;
    151            }
    152            else{
    153              report_cycle++;
    154              tV_accum += tV;
    155              tI_accum += tI;
    156            }
    157          }*/
    158          
    159          int per_sample_dsp()
    160          {
    161          
    162            MPYS = iV;
    163            OP2 = iV;
    164            iV_accum += ((uint32_t)RESHI<<16)| RESLO;
    165            MPYS = iI;
    166            OP2 = iI;
    167            iI_accum += ((uint32_t)RESHI<<16)| RESLO;
    168            
    169            freq_counter++;
    170            if((iV_history > 0) && (iV < 0)){
    171              if(ADCInitFlag == 0){
    172                vfreq_counter_buf += (freq_counter - vfreq_counter_history);
    173                index_f++;
    174              }
    175              vfreq_counter_history = freq_counter;
    176            }
    177            if((iI_history > 0) && (iI < 0)){
    178              if(ADCInitFlag == 0){
    179                ifreq_counter_buf += (ifreq_counter_history - vfreq_counter_history);
    180              }
    181              ifreq_counter_history = freq_counter;
    182            }
    183            if(index_f == 16){
    184              index_f = 0;
    185              freq_counter = 0;
    186              send_F = vfreq_counter_buf;
    187              send_PF = ifreq_counter_buf ;
    188            }    
    189            
    190            iV_history = iV;
    191            iI_history = iI;
    192            
    193            if(iV > iV_max) iV_max = iV;
    194            if(iV < iV_min) iV_min = iV;
    195            if(iI > iI_max) iI_max = iI;
    196            if(iI < iI_min) iI_min = iI;                        
    197            index_a++;
    198            
    199            if(index_a == SAMPLE_RATE){
    200                        tV = iV_max - iV_min;
    201                        tI = iI_max - iI_min;
    202                        tI_accum += tI;
    203                        tV_accum += tV;
    204                        SampleReadyFlag = 1;
    205                        iV_max = 0;
    206                        iI_max = 0;
    207                        iV_min = 0;
    208                        iI_min = 0;
    209                        index_a=0;
    210            }
    211            if(report_cycle == REPORT_RATE){
    212                          report_cycle = 0;
    213                          send_V = tV_accum>>5;
    214                          send_I = tI_accum/76;
    215                          MPYS = send_V;
    216                          OP2 = send_I;
    217                          iP_mpy = ((uint32_t)RESHI<<16)| RESLO;
    218                          send_P = iP_mpy/303;
    219                          tV_accum = 0;
    220                          tI_accum = 0;
    221            }
    222            else{
    223              report_cycle++;
    224            }
    225            
    226            
    227            if(ControllerType == LC_CONTROLLER_TYPE_TRIGGER){
    228              /*if(tI > TRIGGER_THRESHOLD_H){
    229                lcp_dim_flag = false;
    230                lcp_state_report = true;
    231              }*/
    232              if(TriggerFlag == 0){
    233                if(tI > TRIGGER_THRESHOLD_H){
    234                  TriggerFlag = 1;
    235                  lcp_dim_flag = false;
    236                  lcp_state_report = true;
    237                }
    238              }
    239              else {
    240                if(tI < TRIGGER_THRESHOLD_L){
    241                  TriggerFlag = 0;
    242                  lcp_dim_flag = false;
    243                  lcp_state_report = true;
    244                }
    245              }
    246            }
    247            
    248            ADCInitFlag = 0;
    249            return 0;
    250          }
    251          
    252          //SD24 Initiliazation
    253          void adc_init()
    254          {
    255          #ifdef LC_CONTROLLER
    256            SD24CTL = SD24REFS;                           // Internal 1.2V ref,overflow interrupt disabled
    257            
    258            SD24CCTL0 |= SD24GRP | SD24DF | SD24OSR_128;  // Cont,OSR128,DisInt,2sCompliment,GroupW/Ch1
    259            //SD24CCTL0 |= SD24GRP | SD24OSR_128; 
    260            SD24INCTL0 |= SD24INCH_0 + SD24GAIN_1;        // Inch_A0.0,Gainx1,FourthSampleInterrupt
    261            
    262            SD24CCTL1 |= SD24IE | SD24DF | SD24OSR_128 | SD24LSBACC;   // Cont,OSR128,2sCompliment,EnableInt
    263            //SD24CCTL1 |= SD24IE | SD24OSR_128;
    264            SD24INCTL1 |= SD24INCH_0 + SD24GAIN_1;       // Inch_A1.0,Gainx16,FourthSampleInterrupt
    265            
    266            //__delay_cycles(3200);                         // Delay ~200us for 1.2V ref to settle
    267            
    268            SD24CCTL1 |= SD24SC;                          // Set bit to start conversion
    269            //V_init_dc = dc_filter16_init(V_init_estimate_dc);
    270            
    271          #elif LC_OCCUPANCY
    272               SD24CTL = SD24REFS;                           // Internal 1.2V ref,overflow interrupt disabled
    273            
    274            SD24CCTL0 |= SD24GRP | SD24DF | SD24OSR_128;  // Cont,OSR128,DisInt,2sCompliment,GroupW/Ch1
    275            //SD24CCTL0 |= SD24GRP | SD24OSR_128; 
    276            SD24INCTL0 |= SD24INCH_0 + SD24GAIN_1;        // Inch_A0.0,Gainx1,FourthSampleInterrupt
    277            
    278            SD24CCTL1 |= SD24IE | SD24DF | SD24OSR_128 | SD24LSBACC;   // Cont,OSR128,2sCompliment,EnableInt
    279            //SD24CCTL1 |= SD24IE | SD24OSR_128;
    280            SD24INCTL1 |= SD24INCH_0 + SD24GAIN_1;       // Inch_A1.0,Gainx16,FourthSampleInterrupt
    281            
    282            //__delay_cycles(3200);                         // Delay ~200us for 1.2V ref to settle
    283            
    284            SD24CCTL1 |= SD24SC;                          // Set bit to start conversion
    285          
    286            SD24CCTL2  	|= SD24GRP | SD24DF;                                            // Enable interrupt
    287            SD24CCTL3  	|= SD24IE | SD24DF;                                             // Enable interrupt
    288            SD24CTL 	 = SD24REFS;                                                    // Internal ref
    289            SD24CCTL3 	|= SD24SC;                                                      // Set bit to start conversion
    290            
    291          #endif
    292          }
    293          
    294          /******************************************************
    295          // SD24 interrupt service routine sample rate 8khz
    296          ******************************************************/
    297          #pragma vector = SD24_VECTOR
    298          __interrupt void SD24_ISR(void)
    299          {
    300            
    301          #ifdef LC_CONTROLLER
    302            switch (__even_in_range(SD24IV,SD24IV_SD24MEM1)) {
    303                  case SD24IV_NONE: break;
    304                  case SD24IV_SD24OVIFG:  break;
    305                  case SD24IV_SD24MEM0:   break;
    306                  case SD24IV_SD24MEM1:
    307                      iV = SD24MEM0;                // Save result (clears IFG)
    308                      iI = SD24MEM1;                // Save result (clears IFG)
    309                      //SD24CCTL1 &= ~SD24LSBACC;
    310                      //iI = (int16_t) SD24MEM1 << 8;
    311                      //SD24CCTL1 |= SD24LSBACC;
    312                      //iI += (int16_t) SD24MEM1 << 3;
    313                      
    314                      iV -= 28;
    315                      iI -= 780;
    316                      
    317                      //if((iV >= V_ADC_MAX) || (iV<= V_ADC_MIN) && V_endstops)
    318                       // V_endstops--;
    319                      
    320                      per_sample_dsp();
    321                      
    322                      break;
    323                  default: break;
    324            }
    325            
    326          #elif LC_OCCUPANCY
    327             switch (__even_in_range(SD24IV,SD24IV_SD24MEM1)) {
    328                  case SD24IV_NONE: break;
    329                  case SD24IV_SD24OVIFG:  break;
    330                  case SD24IV_SD24MEM0:   break;
    331                  case SD24IV_SD24MEM1:
    332                      
    333                    ipirresult = SD24MEM0;        //PIR sensor Value
    334                      
    335                      iV = SD24MEM2;                // Save result (clears IFG)
    336                      iI = SD24MEM3;                // Save result (clears IFG)
    337                      iVh[index_a] = iV;
    338                      iV -= 68;
    339                      iI -= 1025;
    340                      per_sample_dsp();
    341                  break;
    342                  default: break;
    343            }
    344           
    345          #endif
    346            SD24CCTL1 &= ~SD24IFG;                        // clear interrupt flag
    347          }

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   SD24_ISR
       12   -> per_sample_dsp
      2   adc_init
      6   per_sample_dsp
        6 ?DivMod32s
        6 ?ShiftRight32s_5


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for ADCInitFlag>
       1  ?<Initializer for V_endstops>
       2  ?<Initializer for V_init_estimate_dc>
       1  ADCInitFlag
       2  MPYS
       2  OP2
       2  RESHI
       2  RESLO
       2  SD24CCTL0
       2  SD24CCTL1
       2  SD24CCTL2
       2  SD24CCTL3
       2  SD24CTL
       1  SD24INCTL0
       1  SD24INCTL1
       2  SD24IV
       2  SD24MEM0
       2  SD24MEM2
       2  SD24MEM3
      78  SD24_ISR
       2  SD24_ISR::??INTVEC 14
       1  TriggerFlag
       1  V_endstops
       2  V_init_estimate_dc
      54  adc_init
       2  current_freq_ptr
       2  freq_counter
       2  iI
       8  iI_accum
       2  iI_dc
       4  iI_div
       2  iI_history
       2  iI_max
       2  iI_min
       8  iI_mpy
       4  iI_sqrt
       4  iP_mpy
       2  iV
       8  iV_accum
       2  iV_dc
       2  iV_diff
       4  iV_div
       2  iV_history
       1  iV_history_index
       2  iV_max
       2  iV_min
       8  iV_mpy
       4  iV_sqrt
     268  iVh
       2  ifreq_counter_buf
       2  ifreq_counter_history
       2  index_a
       2  index_f
     484  per_sample_dsp
       2  report_cycle
       2  send_F
       2  send_I
       2  send_P
       2  send_PF
       2  send_THD
       2  send_V
       2  tI
       4  tI_accum
       4  tP
       2  tV
       4  tV_accum
       2  vfreq_counter_buf
       2  vfreq_counter_history

 
 616 bytes in segment CODE
  28 bytes in segment DATA16_AN
   4 bytes in segment DATA16_I
   4 bytes in segment DATA16_ID
 390 bytes in segment DATA16_Z
   2 bytes in segment INTVEC
 
 616 bytes of CODE  memory
   4 bytes of CONST memory (+  2 bytes shared)
 394 bytes of DATA  memory (+ 28 bytes shared)

Errors: none
Warnings: 3
