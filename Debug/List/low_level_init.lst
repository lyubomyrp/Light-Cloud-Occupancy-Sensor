###############################################################################
#
# IAR C/C++ Compiler V6.30.1.934/W32 for MSP430           15/Jul/2015  07:36:39
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430
#    Source file   =  
#        U:\LightCloud - Occupancy Sensor\17 -
#        Firmware\LC_OS_REV01\low_level_init.c
#    Command line  =  
#        "U:\LightCloud - Occupancy Sensor\17 -
#        Firmware\LC_OS_REV01\low_level_init.c" -D LC_OCCUPANCY -D OS_TEST_MODE
#        -lcN "U:\LightCloud - Occupancy Sensor\17 -
#        Firmware\LC_OS_REV01\Debug\List\" -o "U:\LightCloud - Occupancy
#        Sensor\17 - Firmware\LC_OS_REV01\Debug\Obj\" --debug -D__MSP430i2041__
#        -e --double=32 --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.2\430\lib\dlib\dl430fn.h" -Ohz
#        --multiplier=16s --segment __data16=DATA16 --segment __data20=DATA20
#    List file     =  
#        U:\LightCloud - Occupancy Sensor\17 -
#        Firmware\LC_OS_REV01\Debug\List\low_level_init.lst
#    Object file   =  
#        U:\LightCloud - Occupancy Sensor\17 -
#        Firmware\LC_OS_REV01\Debug\Obj\low_level_init.r43
#
###############################################################################

U:\LightCloud - Occupancy Sensor\17 - Firmware\LC_OS_REV01\low_level_init.c
      1          /* --COPYRIGHT--,BSD_EX
      2           * Copyright (c) 2013, Texas Instruments Incorporated
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without
      6           * modification, are permitted provided that the following conditions
      7           * are met:
      8           *
      9           * *  Redistributions of source code must retain the above copyright
     10           *    notice, this list of conditions and the following disclaimer.
     11           *
     12           * *  Redistributions in binary form must reproduce the above copyright
     13           *    notice, this list of conditions and the following disclaimer in the
     14           *    documentation and/or other materials provided with the distribution.
     15           *
     16           * *  Neither the name of Texas Instruments Incorporated nor the names of
     17           *    its contributors may be used to endorse or promote products derived
     18           *    from this software without specific prior written permission.
     19           *
     20           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     21           * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
     22           * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     23           * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
     24           * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
     25           * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
     26           * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
     27           * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
     28           * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     29           * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     30           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     31           *
     32           *******************************************************************************
     33           * 
     34           *                       MSP430 CODE EXAMPLE DISCLAIMER
     35           *
     36           * MSP430 code examples are self-contained low-level programs that typically
     37           * demonstrate a single peripheral function or device feature in a highly
     38           * concise manner. For this the code may rely on the device's power-on default
     39           * register values and settings such as the clock configuration and care must
     40           * be taken when combining code from several examples to avoid potential side
     41           * effects. Also see www.ti.com/grace for a GUI- and www.ti.com/msp430ware
     42           * for an API functional library-approach to peripheral configuration.
     43           *
     44           * --/COPYRIGHT--*/
     45          //******************************************************************************
     46          // MSP430i20xx Initialization Routines - low_level_init.c
     47          //
     48          // This function is called by the start-up code before "main" is called, and
     49          // before data segment initialization is performed. The function affects the
     50          // following modules:
     51          //  - JTAG - JTAG is disabled
     52          //  - TLV - A TLV checksum is performed
     53          //  - PMM - The shared reference is calibrated to 1.16V
     54          //  - Clock System - The DCO is calibrated to 16.384MHz
     55          //  - SD24 - The SD24 reference voltage trimming is calibrated
     56          //
     57          // The return value of this function controls if data segment initialization
     58          // should take place. If 0 is returned, it is bypassed.
     59          //
     60          // Any code example or application written for the MSP430i20xx which takes
     61          // advantage of any of the affected modules is suggested to include this
     62          // function to ensure full calibration of the application.
     63          //
     64          // Additionally, this initialization routine is suggested for small, short 
     65          // code examples to ensure the JTAG will be unlocked. The i20xx series of 
     66          // devices requires execution of 64 MCLK cycles before the JTAG can be unlocked.
     67          // If a device does not execute 64 MCLK cycles, it cannot be accessed via JTAG.
     68          //******************************************************************************
     69          #include "msp430.h"
     70          
     71          #ifdef __TI_COMPILER_VERSION__
     72          int _system_pre_init(void)
     73          #elif __IAR_SYSTEMS_ICC__
     74          int __low_level_init(void)
     75          #else
     76          #error Compiler not supported!
     77          #endif
     78          {
     79              unsigned long *jtagPwd = (unsigned long *)JTAG_DIS_PWD1;
     80          
     81              /* Feed the watchdog timer */
     82              WDTCTL = WDTPW | WDTCNTCL;
     83          
     84              /* Check JTAG password locations and disable JTAG if passwords don't match.
     85               * Else the JTAG will be enabled in the 64th cycle after reset.
     86               */
     87              if ((*jtagPwd != 0x00000000) && (*jtagPwd != 0xFFFFFFFF))
     88              {
     89                  /* Disable JTAG */
     90                  SYSJTAGDIS = JTAGDISKEY;
     91              }
     92          
     93              /* Calibration section
     94               * Check for the BORIFG flag in IFG1. Execute calibration if this was a BORIFG.
     95               * Else skip calibration
     96               */
     97              if (IFG1 & BORIFG)
     98              {
     99                  /* Perform 2's complement checksum on 62 bytes of TLV data */
    100                  unsigned int checksum = 0;
    101                  unsigned char *TLV_address_for_parse = ((unsigned char *)TLV_START);
    102                  unsigned int *TLV_address_for_checksum = ((unsigned int *)TLV_START + 1);
    103          
    104                  do
    105                  {
    106                      checksum ^= *TLV_address_for_checksum++;
    107                  } while (TLV_address_for_checksum <= (unsigned int *)TLV_END);
    108          
    109                  checksum ^= 0xFFFF;
    110                  checksum++;
    111          
    112                  /* If check sum is not correct go to LPM4 */
    113                  if (*((unsigned int *)TLV_START) != checksum)
    114                  {
    115                      /* Enter LPM4 if checksum failed */
    116                      __bis_SR_register(LPM4_bits);
    117                  }
    118          
    119                  /* Check sum matched, now set calibration values */
    120          
    121                  /* Calibrate REF */
    122                  REFCAL1 = *(TLV_address_for_parse + TLV_CAL_REFCAL1);
    123                  REFCAL0 = *(TLV_address_for_parse + TLV_CAL_REFCAL0);
    124          
    125                  /* Calibrate DCO */
    126                  CSIRFCAL = *(TLV_address_for_parse + TLV_CAL_CSIRFCAL);
    127                  CSIRTCAL = *(TLV_address_for_parse + TLV_CAL_CSIRTCAL);
    128                  CSERFCAL = *(TLV_address_for_parse + TLV_CAL_CSERFCAL);
    129                  CSERTCAL = *(TLV_address_for_parse + TLV_CAL_CSERTCAL);
    130          
    131                  /* Calibrate SD24 */
    132                  SD24TRIM = *(TLV_address_for_parse + TLV_CAL_SD24TRIM);
    133          
    134                  /* Clear BORIFG */
    135                  IFG1 &= ~(BORIFG);
    136              }
    137          
    138              /* Feed the watchdog timer */
    139              WDTCTL = WDTPW | WDTCNTCL;
    140          
    141              /* Return value:
    142               *  1 - Perform data segment initialization.
    143               *  0 - Skip data segment initialization.
    144               */
    145              return 1;
    146          }
    147          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      2   __low_level_init


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  CSERFCAL
       1  CSERTCAL
       1  CSIRFCAL
       1  CSIRTCAL
       1  IFG1
       1  REFCAL0
       1  REFCAL1
       1  SD24TRIM
       2  SYSJTAGDIS
       2  WDTCTL
     126  __low_level_init

 
 126 bytes in segment CODE
  12 bytes in segment DATA16_AN
 
 126 bytes of CODE memory
   0 bytes of DATA memory (+ 12 bytes shared)

Errors: none
Warnings: none
