###############################################################################
#
# IAR C/C++ Compiler V6.30.1.934/W32 for MSP430           15/Jul/2015  07:36:39
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430
#    Source file   =  
#        U:\LightCloud - Occupancy Sensor\17 -
#        Firmware\LC_OS_REV01\sensor_motion.c
#    Command line  =  
#        "U:\LightCloud - Occupancy Sensor\17 -
#        Firmware\LC_OS_REV01\sensor_motion.c" -D LC_OCCUPANCY -D OS_TEST_MODE
#        -lcN "U:\LightCloud - Occupancy Sensor\17 -
#        Firmware\LC_OS_REV01\Debug\List\" -o "U:\LightCloud - Occupancy
#        Sensor\17 - Firmware\LC_OS_REV01\Debug\Obj\" --debug -D__MSP430i2041__
#        -e --double=32 --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.2\430\lib\dlib\dl430fn.h" -Ohz
#        --multiplier=16s --segment __data16=DATA16 --segment __data20=DATA20
#    List file     =  
#        U:\LightCloud - Occupancy Sensor\17 -
#        Firmware\LC_OS_REV01\Debug\List\sensor_motion.lst
#    Object file   =  
#        U:\LightCloud - Occupancy Sensor\17 -
#        Firmware\LC_OS_REV01\Debug\Obj\sensor_motion.r43
#
###############################################################################

U:\LightCloud - Occupancy Sensor\17 - Firmware\LC_OS_REV01\sensor_motion.c
      1          /*****************************************************************************
      2          *   
      3          *   File name: sensor_moution.c
      4          *
      5          *   Description: motion and sound sensor handlers
      6          *   This file contains the code for motion and sound sensor handlers.
      7          *
      8          ******************************************************************************/
      9          #ifdef LC_OCCUPANCY
     10          #include "sensor_motion.h"
     11          #include "io.h"
     12          #include "global.h"
     13          
     14          //unsigned int ipirresult;                                                        //PIR sensor value from ADC
     15          //unsigned int PIR_min,PIR_max;              					// PIR min and max values
     16          //unsigned int PIR_direction = 0; 		        			//0 = down direction, 1 = up direction
     17          //unsigned int PIR_sensitivity  = PIR_THRESHOLD;	        			// sensitivity min = , max =
     18          //unsigned int PIR_minSlopeTime = PIR_MIN_PULSE_PERIOD; 	        		//100mS
     19          //unsigned int PIR_maxSlopeTime = PIR_MAX_PULSE_PERIOD; 		        	//2000mS
     20          //unsigned int PIR_slopetime=0;
     21          //unsigned int PIR_newADC;     						        //temporerry result for
     22          
     23          //unsigned int PIR_diff;                  					// PIR MAX-MIN
     24          
     25          
     26          
     27          
     28          /**************************************************
     29           *	PIR sensor routine
     30           *************************************************/
     31          void pir_triger(void)
     32          {
     33            
     34            PIR_sensitivity  = PIR_THRESHOLD;	        			        				// sensitivity min = , max =
     35            PIR_minSlopeTime = PIR_MIN_PULSE_PERIOD; 	        		        			//100mS
     36            PIR_maxSlopeTime = PIR_MAX_PULSE_PERIOD; 		        	        			//2000mS
     37          
     38            PIR_newADC=ipirresult;                                                      	//sensor output value
     39          	if(PIR_slopetime == 0)
     40          	{
     41          		PIR_min = PIR_newADC;
     42          		PIR_max = 0;
     43          		PIR_slopetime++;
     44          	}
     45          	else if(PIR_slopetime == 1)
     46          	{
     47          		if(PIR_newADC > PIR_min)
     48          		{
     49          			PIR_max = PIR_newADC;
     50          			PIR_direction = 1;
     51          			PIR_slopetime++;
     52          		}
     53          		if (PIR_newADC < PIR_min)
     54          		{
     55          			PIR_max = PIR_min;
     56          			PIR_min = PIR_newADC;
     57          			PIR_direction = 0;
     58          			PIR_slopetime++;
     59          		}
     60          	}
     61          	else if(PIR_slopetime > 1)
     62          	{
     63          		if(PIR_direction == 0)
     64          		{
     65          			if(PIR_newADC < PIR_min)
     66          			{
     67          				PIR_min = PIR_newADC;
     68          				PIR_slopetime++;
     69          			}
     70          			else
     71          			{
     72          				PIR_diff = PIR_max-PIR_min;
     73          				if((PIR_diff > PIR_sensitivity)&&((PIR_slopetime > PIR_minSlopeTime) && (PIR_slopetime < PIR_maxSlopeTime)))
     74          				{
     75          					sensor_event_flag = pir_event ;// PIR event happen
     76          				} //else pirsens = false;
     77          				PIR_max = 0;
     78          				PIR_min = 0;
     79          				PIR_slopetime = 0;
     80          				PIR_direction = 0;//??
     81          			}
     82          		}
     83          		if(PIR_direction == 1)
     84          		{
     85          			if(PIR_newADC > PIR_max)
     86          			{
     87          				PIR_max = PIR_newADC;
     88          				PIR_slopetime++;
     89          			}
     90          			else
     91          			{
     92          				PIR_diff = PIR_max-PIR_min;
     93          				if ((PIR_diff > PIR_sensitivity)&&((PIR_slopetime > PIR_minSlopeTime) && (PIR_slopetime < PIR_maxSlopeTime)))
     94          				{
     95          					sensor_event_flag = pir_event ;// PIR event happen
     96          				} //else pirsens = false;
     97          				PIR_max = 0;
     98          				PIR_min = 0;
     99          				PIR_slopetime = 0;
    100          				PIR_direction = 0;
    101          			}
    102          		}
    103          	}
    104                  
    105          }
    106          
    107          
    108          void led_green1(unsigned int On_t,unsigned int period_t)                        //Green 1 led driver On_t - led on time sec, led period - period_t
    109          {
    110          	if(led_green1_tic==0) led_green1_tic =period_t;
    111          	else if(led_green1_tic>On_t) LED_G1_OFF;
    112          		 else LED_G1_ON;
    113          }
    114          
    115          
    116          void ocupansy_action_check(void)				                				// check routine for ocupansy actiot run led and relay for time , send packet ...
    117          {
    118          	if((sensor_event_flag == pir_event) && (current_triger_delay ==0)){			//event just happen
    119          	current_triger_delay = TRIGER_DELAY;										//reset delay timer
    120          	if(current_controller_mode == occupancy_sensor) RLY_ON;                     //turn on relay only for test
    121              #ifdef OS_TEST_MODE
    122              led_current_state_G1 =led_on;                                               // moution (green led ) off, for test on
    123             	#endif    
    124          	#ifndef OS_TEST_MODE
    125          	led_current_state_G1 =led_off;												// moution (green led ) off, for test on    
    126          	#endif    
    127              sensor_event_flag = sensor_nill;                                            //reset motion flag
    128              ResetRvBuf();                                                               // clear serial receive buffer
    129              send_occupancy_event();                     	                            //send message event heppen
    130              state_change_report();														//send state
    131              triger_delay_time_over_report_flag=false;
    132            }
    133            if((!(sensor_event_flag == pir_event)) && (current_triger_delay ==0)){        //no event happen and time over
    134          	if(current_controller_mode == occupancy_sensor) RLY_OFF;                    // moution (green led ) run for patern 3 
    135              #ifdef OS_TEST_MODE
    136              led_current_state_G1 =blink_patern_3;                                       // moution (green led ) off, for test on
    137             	#endif    
    138          	#ifndef OS_TEST_MODE
    139          	led_current_state_G1 =blink_patern_3;										// moution (green led ) off, for test on    
    140          	#endif    
    141              sensor_event_flag = sensor_nill;                                            //reset motion flag
    142              if(triger_delay_time_over_report_flag==false) {
    143                state_change_report();
    144                triger_delay_time_over_report_flag=true;  
    145              }
    146            }
    147            if((sensor_event_flag == pir_event) && (!(current_triger_delay ==0))){        //event happen but time is not over
    148              current_triger_delay = TRIGER_DELAY;                                        //reset delay timer
    149              if(current_controller_mode == occupancy_sensor) RLY_ON;                     //keep on relay only for test
    150              #ifdef OS_TEST_MODE
    151              led_current_state_G1 =led_on;                                               // moution (green led ) off, for test on
    152             	#endif    
    153          	#ifndef OS_TEST_MODE
    154          	led_current_state_G1 =led_off;												// moution (green led ) off, for test on    
    155          	#endif    
    156              sensor_event_flag = sensor_nill;                                            // do not send a message to gateway
    157            }
    158          }
    159          
    160          
    161          #endif

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      2   led_green1
      2   ocupansy_action_check
        2   -> ResetRvBuf
        2   -> send_occupancy_event
        2   -> state_change_report
      2   pir_triger


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ?Subroutine0
       6  ?Subroutine1
      34  ?Subroutine2
      28  ?Subroutine3
       2  _A_PAOUT_L
      30  led_green1
      96  ocupansy_action_check
     150  pir_triger

 
 350 bytes in segment CODE
   2 bytes in segment DATA16_AN
 
 350 bytes of CODE memory
   0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: 3
