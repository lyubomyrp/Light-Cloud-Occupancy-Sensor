###############################################################################
#
# IAR C/C++ Compiler V6.30.1.934/W32 for MSP430           15/Jul/2015  07:36:38
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430
#    Source file   =  
#        U:\LightCloud - Occupancy Sensor\17 - Firmware\LC_OS_REV01\api_pkt.c
#    Command line  =  
#        "U:\LightCloud - Occupancy Sensor\17 - Firmware\LC_OS_REV01\api_pkt.c"
#        -D LC_OCCUPANCY -D OS_TEST_MODE -lcN "U:\LightCloud - Occupancy
#        Sensor\17 - Firmware\LC_OS_REV01\Debug\List\" -o "U:\LightCloud -
#        Occupancy Sensor\17 - Firmware\LC_OS_REV01\Debug\Obj\" --debug
#        -D__MSP430i2041__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430fn.h" -Ohz
#        --multiplier=16s --segment __data16=DATA16 --segment __data20=DATA20
#    List file     =  
#        U:\LightCloud - Occupancy Sensor\17 -
#        Firmware\LC_OS_REV01\Debug\List\api_pkt.lst
#    Object file   =  
#        U:\LightCloud - Occupancy Sensor\17 -
#        Firmware\LC_OS_REV01\Debug\Obj\api_pkt.r43
#
###############################################################################

U:\LightCloud - Occupancy Sensor\17 - Firmware\LC_OS_REV01\api_pkt.c
      1          /*****************************************************************************
      2          *   File name: api_pkt.c
      3          *
      4          *   Description: API packet generation
      5          *     This file contains functions for generating Zigbee API interface packets
      6          *
      7          ******************************************************************************
      8          */
      9          
     10          #include <string.h>
     11          #include  <stdbool.h>
     12          #include "serial.h"
     13          #include "timer.h"
     14          #include "ctrl_pkt.h"
     15          #define API_DEF
     16          #include "api_pkt.h"
     17          #include "global.h"
     18          
     19          //unsigned char destination_addr[8] = {0};
     20          unsigned char destination_addr[8] = {0x00, 0x13, 0xa2, 0x00, 0x40, 0xb6, 0x68, 0x3d};
     21          unsigned char network_addr[2] = {0xFF, 0xFE};
     22          //unsigned char network_addr[2] = {0};
     23          
     24          /*****************************************************************************
     25          *
     26          * Function: send_radio_api_packet
     27          *
     28          * Description: Send AT command API packet
     29          *
     30          * Input:  cmd1 - first AT command character
     31          *         cmd2 - second AT command character
     32          *
     33          ******************************************************************************
     34          */
     35          unsigned char send_radio_api_packet(unsigned char cmd1, unsigned char cmd2)
     36          {
     37              unsigned char i, index = 0;
     38              unsigned char checksum = 0;
     39              
     40              tx_buf[index++] = 0x7E;             // Start delimiter
     41              tx_buf[index++] = 00;               // Length of packet body
     42              tx_buf[index++] = 0x04;
     43              tx_buf[index++] = 0x08;             // Frame type
     44              tx_buf[index++] = 0x52;             // Frame ID
     45              tx_buf[index++] = cmd1;             // Command name, 1st character
     46              tx_buf[index++] = cmd2;             // Command name, 2nd character
     47              
     48              for(i=3; i < index; i++)            // calculate checksum
     49                checksum += tx_buf[i];
     50              tx_buf[index++] = 0xFF - checksum;    // Checksum
     51              
     52              serial_0_xmit(0, index);          // Send packet
     53              //led_rvpkt_delay = TIMER_2S;
     54              return 0;
     55          }
     56          
     57          /*****************************************************************************
     58          *
     59          * Function: send_radio_api_packet_param
     60          *
     61          * Description: Send AT command API packet with parameter
     62          *
     63          * Input:  cmd1 - first AT command character
     64          *         cmd2 - second AT command character
     65          *         param - parameter passed in packet
     66          *
     67          ******************************************************************************
     68          */
     69          unsigned char send_radio_api_packet_param(unsigned char cmd1, unsigned char cmd2, unsigned char param)
     70          {
     71              unsigned char i, index = 0;
     72              unsigned char checksum = 0;
     73              
     74              tx_buf[index++] = 0x7E;             // Start delimiter
     75              tx_buf[index++] = 00;               // Length of packet body
     76              tx_buf[index++] = 0x05;
     77              tx_buf[index++] = 0x08;             // Frame type
     78              tx_buf[index++] = 0x01;             // Frame ID
     79              tx_buf[index++] = cmd1;             // Command name, 1st character
     80              tx_buf[index++] = cmd2;             // Command name, 2nd character
     81              tx_buf[index++] = param;            // parameter
     82              
     83              for(i=3; i < index; i++)            // calculate checksum
     84                checksum += tx_buf[i];
     85              tx_buf[index++] = 0xFF - checksum;    // Checksum
     86              
     87              serial_0_xmit(0, index);          // Send packet
     88              //led_rvpkt_delay = TIMER_2S;
     89              return 0;
     90          }
     91          
     92          /*****************************************************************************
     93          *
     94          * Function: send_radio_api_packet_param_int
     95          *
     96          * Description: Send AT command API packet with parameter
     97          *
     98          * Input:  cmd1 - first AT command character
     99          *         cmd2 - second AT command character
    100          *         param - parameter passed in packet
    101          *
    102          ******************************************************************************
    103          */
    104          unsigned char send_radio_api_packet_param_int(unsigned char cmd1, unsigned char cmd2, unsigned int param)
    105          {
    106              unsigned char i, index = 0;
    107              unsigned char checksum = 0;
    108              
    109              tx_buf[index++] = 0x7E;             // Start delimiter
    110              tx_buf[index++] = 00;               // Length of packet body
    111              tx_buf[index++] = 0x06;
    112              tx_buf[index++] = 0x08;             // Frame type
    113              tx_buf[index++] = 0x01;             // Frame ID
    114              tx_buf[index++] = cmd1;             // Command name, 1st character
    115              tx_buf[index++] = cmd2;             // Command name, 2nd character
    116              tx_buf[index++] = (char)(param >> 8); // parameter high byte
    117              tx_buf[index++] = (char)(param & 0x00ff);   // parameter low byte
    118                 
    119              for(i=3; i < index; i++)            // calculate checksum
    120                checksum += tx_buf[i];
    121              tx_buf[index++] = 0xFF - checksum;    // Checksum
    122              
    123              serial_0_xmit(0, index);          // Send packet
    124              //led_rvpkt_delay = TIMER_2S;
    125              return 0;
    126          }
    127          
    128          /*****************************************************************************
    129          *
    130          * Function: send_radio_api_packet_param_string
    131          *
    132          * Description: Send AT command API packet with parameter string
    133          *
    134          * Input:  cmd1 - first AT command character
    135          *         cmd2 - second AT command character
    136          *         param - parameter passed in packet
    137          *
    138          ******************************************************************************
    139          */
    140          unsigned char send_radio_api_packet_param_string(unsigned char cmd1, unsigned char cmd2, unsigned char len, unsigned char *param)
    141          {
    142              unsigned char i, index = 0;
    143              unsigned char checksum = 0;
    144              
    145              tx_buf[index++] = 0x7E;             // Start delimiter
    146              tx_buf[index++] = 00;               // Length of packet body
    147              tx_buf[index++] = len + 4;
    148              tx_buf[index++] = 0x08;             // Frame type
    149              tx_buf[index++] = 0x01;             // Frame ID
    150              tx_buf[index++] = cmd1;             // Command name, 1st character
    151              tx_buf[index++] = cmd2;             // Command name, 2nd character
    152              
    153              memcpy(&tx_buf[index], param, len);      // Copy data into packet
    154              index += len;
    155              
    156              for(i=3; i < index; i++)            // calculate checksum
    157                checksum += tx_buf[i];
    158              tx_buf[index++] = 0xFF - checksum;    // Checksum
    159              
    160              serial_0_xmit(0, index);          // Send packet
    161              //led_rvpkt_delay = TIMER_2S;
    162              return 0;
    163          }
    164          
    165          /*****************************************************************************
    166          *
    167          * Function: send_radio_api_packet_data
    168          *
    169          * Description: Send AT command API packet with data
    170          *
    171          * Input:  rf_data - pointer to data to be copied into packet
    172          *         len - length of data to be copied
    173          *
    174          ******************************************************************************
    175          */
    176          unsigned char send_radio_api_packet_data(unsigned char *dest_addr, unsigned char *network_addr, unsigned char *rf_data, unsigned int len)
    177          {
    178              unsigned char i, index = 0;
    179              unsigned char checksum = 0;
    180              
    181              tx_buf[index++] = 0x7E;                     // Start delimiter
    182              tx_buf[index++] = 00;                       // Length of packet body
    183              tx_buf[index++] = len + 14;
    184              tx_buf[index++] = 0x10;                     // Frame type
    185              tx_buf[index++] = 0x01;                     // Frame ID
    186              memcpy(&tx_buf[index], dest_addr, 8);       // Copy destination address
    187              index += 8;
    188          //    memcpy(&tx_buf[index], network_addr, 2);    // Copy network address of destination
    189          //    index += 2;
    190          //    tx_buf[index++] = 0x68;                      // Broadcast network address
    191          //    tx_buf[index++] = 0x17;  
    192              tx_buf[index++] = 0xFF;                      // Broadcast network address
    193              tx_buf[index++] = 0xFE;  
    194              tx_buf[index++] = 0;                        // Broadcast Radius (max number of hops)
    195              tx_buf[index++] = 0;                        // Options
    196              memcpy(&tx_buf[index], rf_data, len);      // Copy data into packet
    197              index += len;
    198             
    199              
    200              for(i=3; i < index; i++)                    // calculate checksum
    201                checksum += tx_buf[i];
    202              tx_buf[index++] = 0xFF - checksum;            // Checksum
    203              
    204              serial_0_xmit(0, index);                  // Send packet
    205              //led_rvpkt_delay = TIMER_2S;
    206              return 0;
    207          }
    208          
    209          /*****************************************************************************
    210          *
    211          * Function: send_radio_api_mode_cmd
    212          *
    213          * Description: Send AT mode command to have radio re-enter API mode
    214          *
    215          * Input:  None
    216          *
    217          ******************************************************************************
    218          */
    219          unsigned char send_radio_api_mode_cmd(void)
    220          {
    221              unsigned char index = 0;
    222              
    223              tx_buf[index++] = '+';              // Escape sequence
    224              tx_buf[index++] = '+';
    225              tx_buf[index++] = '+';
    226              tx_buf[index++] = 'A';             // command characters
    227              tx_buf[index++] = 'P';
    228              tx_buf[index++] = '1';
    229              serial_0_xmit(0, index);                  // Send packet
    230              return 0;
    231          }
    232          
    233          /*****************************************************************************
    234          *
    235          * Function: Check send AT command
    236          *
    237          *****************************************************************************/

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      2   send_radio_api_mode_cmd
        2   -> serial_0_xmit
      2   send_radio_api_packet
        2   -> serial_0_xmit
      8   send_radio_api_packet_data
        8   -> memcpy
       10   -> serial_0_xmit
        8 ?Epilogue3
      4   send_radio_api_packet_param
        6   -> serial_0_xmit
      4   send_radio_api_packet_param_int
        6   -> serial_0_xmit
      6   send_radio_api_packet_param_string
        6   -> memcpy
        8   -> serial_0_xmit


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Initializer for destination_addr>
       2  ?<Initializer for network_addr>
      12  ??Subroutine2_0
       8  ?Subroutine0
       2  ?Subroutine2
      18  ?Subroutine3
      10  ?Subroutine4
       8  destination_addr
       2  network_addr
      44  send_radio_api_mode_cmd
      56  send_radio_api_packet
     118  send_radio_api_packet_data
      48  send_radio_api_packet_param
      56  send_radio_api_packet_param_int
      76  send_radio_api_packet_param_string

 
 448 bytes in segment CODE
  10 bytes in segment DATA16_I
  10 bytes in segment DATA16_ID
 
 448 bytes of CODE  memory
  10 bytes of CONST memory
  10 bytes of DATA  memory

Errors: none
Warnings: none
