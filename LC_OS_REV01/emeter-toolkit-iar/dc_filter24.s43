;******************************************************************************
;  dc_filter24.s43 (IAR version) - DC estimation and removal for 24 bit signals
;
;  Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/ 
; 
;  Redistribution and use in source and binary forms, with or without 
;  modification, are permitted provided that the following conditions 
;  are met:
;
;    Redistributions of source code must retain the above copyright 
;    notice, this list of conditions and the following disclaimer.
;
;    Redistributions in binary form must reproduce the above copyright
;    notice, this list of conditions and the following disclaimer in the 
;    documentation and/or other materials provided with the   
;    distribution.
;
;    Neither the name of Texas Instruments Incorporated nor the names of
;    its contributors may be used to endorse or promote products derived
;    from this software without specific prior written permission.
;
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
;  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
;  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
;  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
;  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
;  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
;  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
;  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
;  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;
;******************************************************************************

#include "io.h"
#include "macros.m43"

#if !defined(__IAR_SYSTEMS_ASM__)  ||  !(((__TID__ >> 8) & 0x7f) == 43)
#error This file is compatible with the IAR MSP430 assembler.
#endif

#define p           R12
#define x           R13
#define x_lo        R14
#define x_hi        R15

#define tmp         R14

#define x_ext       R10
#define z           R11

#define result_lo   R12
#define result_hi   R13

; A routine to filter away the DC content from an AC mains waveform
; signal. It does this my using a heavily damped single pole leaky integrator,
; with noise shaping, to estimate the DC level. The current DC level is then
; subtracted from the signal.
; The actual calculations are:
;   z += (((x << 16) - z) >> 14);
;   return  x - (z >> 16);
; where z is a 48 bit value, stored as a 3 element array of 16 bit integers.

;int32_t dc_filter24(int16_t p[3], int32_t x);
    public dc_filter24

    RSEG CODE
dc_filter24
#if __CORE__==__430X_CORE__
    pushm.w #2,R11
#else
    push.w  R10
    push.w  R11
#endif
    mov.w   p,z
    ;
    mov.w   x_lo,result_lo
    mov.w   x_hi,result_hi
    sub.w   2(z),x_lo
    subc.w  4(z),x_hi
    ; Shift, so our final effective shift is 14 bits.
    rla.w   x_lo
    rlc.w   x_hi
    subc.w  x_ext,x_ext
    inv.w   x_ext
    rla.w   x_lo
    rlc.w   x_hi
    rlc.w   x_ext
    ;
    add.w   x_lo,0(z)
    addc.w  2(z),x_hi
    addc.w  4(z),x_ext
    ; Store the updated *z
    mov.w   x_hi,2(z)
    mov.w   x_ext,4(z)
    ;
    sub.w   x_hi,result_lo
    subc.w  x_ext,result_hi
    ;
#if __CORE__==__430X_CORE__
    popm.w  #2,R11
#else
    pop.w   R11
    pop.w   R10
#endif
    xret

;int32_t dc_filter24_no_update(const int16_t p[3], int32_t x);
    public dc_filter24_no_update

    RSEG CODE
dc_filter24_no_update
;    sub.w   2(z),x_lo
;    subc.w  4(z),x_hi
    sub.w   2(p),x_lo
    subc.w  4(p),x_hi
;    mov.w   x_hi,result_lo
    mov.w   x_lo,result_lo
;    mov.w   x_ext,result_hi
    mov.w   x_hi,result_hi
    xret

;void dc_filter24_init(int16_t p[3], int32_t x);
    public dc_filter24_init

    RSEG CODE
dc_filter24_init
    ; Put the initial estimate in place
    mov.w   #0,0(p)
    mov.b   x_lo,1(p)
    swpb    x_lo
    mov.w   x_lo,2(p)
    mov.b   x_hi,3(p)
    swpb    x_hi
    sxt     x_hi
    mov.w   x_hi,4(p)
    xret
;    mov.w   #0,0(p)
;    mov.w   #0,2(p)
;    mov.w   #0,4(p)
;    mov.b   x,3(p)
;    swpb    x
;    sxt     x
;    mov.w   x,4(p)
;    xret

;int32_t dc_filter24_estimate(const int16_t p[3]);
    public dc_filter24_estimate

    RSEG CODE
dc_filter24_estimate
    mov.w   p,tmp
    mov.b   4(tmp),result_hi
    swpb    result_hi
    mov.b   3(tmp),result_lo
    bis.w   result_lo,result_hi
    mov.b   2(tmp),result_lo
    swpb    result_lo
    mov.b   1(tmp),tmp
    bis.w   tmp,result_lo
    xret
    end
