;******************************************************************************
;  isqrt64.s43 (IAR version) - 
;
;  Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/ 
; 
;  Redistribution and use in source and binary forms, with or without 
;  modification, are permitted provided that the following conditions 
;  are met:
;
;    Redistributions of source code must retain the above copyright 
;    notice, this list of conditions and the following disclaimer.
;
;    Redistributions in binary form must reproduce the above copyright
;    notice, this list of conditions and the following disclaimer in the 
;    documentation and/or other materials provided with the   
;    distribution.
;
;    Neither the name of Texas Instruments Incorporated nor the names of
;    its contributors may be used to endorse or promote products derived
;    from this software without specific prior written permission.
;
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
;  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
;  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
;  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
;  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
;  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
;  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
;  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
;  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;
;******************************************************************************

#include "io.h"
#include "macros.m43"

#if !defined(__IAR_SYSTEMS_ASM__)  ||  !(((__TID__ >> 8) & 0x7f) == 43)
#error This file is compatible with the IAR MSP430 assembler.
#endif

#if __VER__ < 400
#error This file is compatible with the IAR MSP430 assembler 4.0 or later.
#endif

; Parameters
#define h_0         R12
#define h_1         R13
#define h_2         R14
#define h_3         R15

#define result_0    R12
#define result_1    R13
#define result_2    R14
#define result_3    R15

; Temporary variables
#define x_0         R8
#define x_1         R9
#define x_2         R10
#define x_3         R11
#define y_0         R4
#define y_1         R5
#define y_2         R6
#define y_3         R7

;uint64_t isqrt64(uint64_t h)
    public isqrt64

    RSEG CODE
isqrt64
    ;The answer is calculated as a 64 bit value, where the last
    ;32 bits are fractional.
    ;Calling with negative numbers is not a good idea :-)
#if __CORE__==__430X_CORE__
    pushm.w #8,R11
#else
    push.w  R4
    push.w  R5
    push.w  R6
    push.w  R7
    push.w  R8
    push.w  R9
    push.w  R10
    push.w  R11
#endif

    ; Use a variable on the stack as the loop counter
    mov.w   #32,R11
    push.w  R11

    mov.w   #0,x_0
    mov.w   #0,x_1
    mov.w   #0,x_2
    mov.w   #0,x_3
    mov.w   #0,y_0
    mov.w   #0,y_1
    mov.w   #0,y_2
    mov.w   #0,y_3
isqrt64_1
    setc
    rlc.w   x_0
    rlc.w   x_1
    rlc.w   x_2
    rlc.w   x_3
    sub.w   x_0,y_0
    subc.w  x_1,y_1
    subc.w  x_2,y_2
    subc.w  x_3,y_3
    jhs     isqrt64_2
    add.w   x_0,y_0
    addc.w  x_1,y_1
    addc.w  x_2,y_2
    addc.w  x_3,y_3
    sub.w   #2,x_0
isqrt64_2
    inc.w   x_0
    ;
    rla.w   h_0
    rlc.w   h_1
    rlc.w   h_2
    rlc.w   h_3
    rlc.w   y_0
    rlc.w   y_1
    rlc.w   y_2
    rlc.w   y_3
    ;
    rla.w   h_0
    rlc.w   h_1
    rlc.w   h_2
    rlc.w   h_3
    rlc.w   y_0
    rlc.w   y_1
    rlc.w   y_2
    rlc.w   y_3
    ;
    dec     0(sp)
    jne     isqrt64_1

    mov.w   #32,0(sp)
isqrt64_3
    setc
    rlc.w   x_0
    rlc.w   x_1
    rlc.w   x_2
    rlc.w   x_3
    sub.w   x_0,y_0
    subc.w  x_1,y_1
    subc.w  x_2,y_2
    subc.w  x_3,y_3
    jhs     isqrt64_4
    add.w   x_0,y_0
    addc.w  x_1,y_1
    addc.w  x_2,y_2
    addc.w  x_3,y_3
    sub.w   #2,x_0
isqrt64_4
    inc.w   x_0
    ;
    rla.w   y_0
    rlc.w   y_1
    rlc.w   y_2
    rlc.w   y_3
    ;
    rla.w   y_0
    rlc.w   y_1
    rlc.w   y_2
    rlc.w   y_3
    ;
    dec     0(sp)
    jne     isqrt64_3

    mov.w   x_0,result_0
    mov.w   x_1,result_1
    mov.w   x_2,result_2
    mov.w   x_3,result_3

    pop.w   R11
#if __CORE__==__430X_CORE__
    popm.w  #8,R11
#else
    pop.w   R11
    pop.w   R10
    pop.w   R9
    pop.w   R8
    pop.w   R7
    pop.w   R6
    pop.w   R5
    pop.w   R4
#endif
    xret
    end
