###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.52.1.50724/W32 for MSP430       07/Jul/2014  17:16:18 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430                                                     #
#    Source file   =  C:\Users\a0283112\Desktop\Submeter i2040                #
#                     8k_DC_THD_AUTO_OSR_IAR5.5\emeter-metrology\src\metrolog #
#                     y-flash.c                                               #
#    Command line  =  "C:\Users\a0283112\Desktop\Submeter i2040               #
#                     8k_DC_THD_AUTO_OSR_IAR5.5\emeter-metrology\src\metrolog #
#                     y-flash.c" -D __MSP430__ -lCN                           #
#                     "C:\Users\a0283112\Desktop\Submeter i2040               #
#                     8k_DC_THD_AUTO_OSR_IAR5.5\emeter-metrology\emeter-metro #
#                     logy-i2041\Debug\List\" -lA                             #
#                     "C:\Users\a0283112\Desktop\Submeter i2040               #
#                     8k_DC_THD_AUTO_OSR_IAR5.5\emeter-metrology\emeter-metro #
#                     logy-i2041\Debug\List\" -o                              #
#                     "C:\Users\a0283112\Desktop\Submeter i2040               #
#                     8k_DC_THD_AUTO_OSR_IAR5.5\emeter-metrology\emeter-metro #
#                     logy-i2041\Debug\Obj\" --debug -D__MSP430I2041__ -e     #
#                     --double=32 --dlib_config "C:\Program Files (x86)\IAR   #
#                     Systems\Embedded Workbench                              #
#                     6.5_0\430\LIB\DLIB\dl430fn.h" --library_module -I       #
#                     "C:\Users\a0283112\Desktop\Submeter i2040               #
#                     8k_DC_THD_AUTO_OSR_IAR5.5\emeter-metrology\emeter-metro #
#                     logy-i2041/../../emeter-toolkit/include\" -I            #
#                     "C:\Users\a0283112\Desktop\Submeter i2040               #
#                     8k_DC_THD_AUTO_OSR_IAR5.5\emeter-metrology\emeter-metro #
#                     logy-i2041/../include\" -I                              #
#                     "C:\Users\a0283112\Desktop\Submeter i2040               #
#                     8k_DC_THD_AUTO_OSR_IAR5.5\emeter-metrology\emeter-metro #
#                     logy-i2041\" -Ohs --multiplier=16s                      #
#    List file     =  C:\Users\a0283112\Desktop\Submeter i2040                #
#                     8k_DC_THD_AUTO_OSR_IAR5.5\emeter-metrology\emeter-metro #
#                     logy-i2041\Debug\List\metrology-flash.lst               #
#    Object file   =  C:\Users\a0283112\Desktop\Submeter i2040                #
#                     8k_DC_THD_AUTO_OSR_IAR5.5\emeter-metrology\emeter-metro #
#                     logy-i2041\Debug\Obj\metrology-flash.r43                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\a0283112\Desktop\Submeter i2040 8k_DC_THD_AUTO_OSR_IAR5.5\emeter-metrology\src\metrology-flash.c
      1          /*******************************************************************************
      2           *  metrology-flash.c - Flash reading and writing routines.
      3           *
      4           *  Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/ 
      5           * 
      6           *  Redistribution and use in source and binary forms, with or without 
      7           *  modification, are permitted provided that the following conditions 
      8           *  are met:
      9           *
     10           *    Redistributions of source code must retain the above copyright 
     11           *    notice, this list of conditions and the following disclaimer.
     12           *
     13           *    Redistributions in binary form must reproduce the above copyright
     14           *    notice, this list of conditions and the following disclaimer in the 
     15           *    documentation and/or other materials provided with the   
     16           *    distribution.
     17           *
     18           *    Neither the name of Texas Instruments Incorporated nor the names of
     19           *    its contributors may be used to endorse or promote products derived
     20           *    from this software without specific prior written permission.
     21           *
     22           *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
     23           *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
     24           *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     25           *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
     26           *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     27           *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
     28           *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
     29           *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     30           *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
     31           *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
     32           *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     33           *
     34           ******************************************************************************/
     35          
     36          #include <signal.h>
     37          #include <inttypes.h>
     38          #if defined(__MSP430__)
     39          #include <msp430.h>

   \                                 In  segment DATA16_AN, at 0x128
   \   unsigned short volatile FCTL1
   \                     FCTL1:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x12c
   \   unsigned short volatile FCTL3
   \                     FCTL3:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x120
   \   unsigned short volatile WDTCTL
   \                     WDTCTL:
   \   000000                DS8 2
     40          #endif
     41          #include <emeter-toolkit.h>
     42          
     43          #include "metrology-flash.h"
     44          
     45          #if defined(__MSP430__)
     46          #define FSEG_A 0x01080      /* Flash Segment A start address */
     47          #define FSEG_B 0x01000      /* Flash Segment B start address */
     48          
     49          #define kick_watchdog()             WDTCTL = WDT_ARST_1000
     50          

   \                                 In  segment CODE, align 2
     51          void flash_clr(int *ptr)
   \                     flash_clr:
     52          {
     53              kick_watchdog();
   \   000000   B2400C5A2001 MOV.W   #0x5a0c, &0x120
     54             
     55              _DINT();
   \   000006   32C2         DINT
   \   000008   0343         NOP
     56          #if defined(__MSP430i4020__) || defined(__MSP430i2040__) || defined(__MSP430i2041__)
     57              if ((FCTL3 & LOCKSEG))
     58                  FCTL3 = FWKEY | LOCKSEG;
     59          #else
     60              FCTL3 = FWKEY;                      /* Lock = 0 */
   \   00000A   B24000A52C01 MOV.W   #0xa500, &0x12c
     61          #endif
     62              FCTL1 = FWKEY | ERASE;
   \   000010   B24002A52801 MOV.W   #0xa502, &0x128
     63              *((int *) ptr) = 0;                 /* Erase flash segment */
   \   000016   8C430000     MOV.W   #0x0, 0(R12)
     64              _EINT();
   \   00001A   32D2         EINT
     65          }
   \   00001C   3041         RET
   \   00001E                REQUIRE WDTCTL
   \   00001E                REQUIRE FCTL3
   \   00001E                REQUIRE FCTL1
     66          

   \                                 In  segment CODE, align 2
     67          void flash_write_int8(int8_t *ptr, int8_t value)
   \                     flash_write_int8:
     68          {
     69              _DINT();
   \   000000   32C2         DINT
   \   000002   0343         NOP
     70              kick_watchdog();
   \   000004   B2400C5A2001 MOV.W   #0x5a0c, &0x120
     71          #if defined(__MSP430i4020__) || defined(__MSP430i2040__) || defined(__MSP430i2041__)
     72              if ((FCTL3 & LOCKSEG))
     73                  FCTL3 = FWKEY | LOCKSEG;
     74          #else
     75              FCTL3 = FWKEY;                      /* Lock = 0 */
   \   00000A   B24000A52C01 MOV.W   #0xa500, &0x12c
     76          #endif
     77              FCTL1 = LOCK | WRT;
   \   000010   B24050002801 MOV.W   #0x50, &0x128
     78              *((int8_t *) ptr) = value;          /* Program the flash */
   \   000016   CC4D0000     MOV.B   R13, 0(R12)
     79          }
   \   00001A   3041         RET
   \   00001C                REQUIRE WDTCTL
   \   00001C                REQUIRE FCTL3
   \   00001C                REQUIRE FCTL1
     80          

   \                                 In  segment CODE, align 2
     81          void flash_write_int16(int16_t *ptr, int16_t value)
   \                     flash_write_int16:
     82          {
     83              _DINT();
   \   000000   32C2         DINT
   \   000002   0343         NOP
     84              kick_watchdog();
   \   000004   B2400C5A2001 MOV.W   #0x5a0c, &0x120
     85          #if defined(__MSP430i4020__) || defined(__MSP430i2040__) || defined(__MSP430i2041__)
     86              if ((FCTL3 & LOCKSEG))
     87                  FCTL3 = FWKEY | LOCKSEG;
     88          #else
     89              FCTL3 = FWKEY;                      /* Lock = 0 */
   \   00000A   B24000A52C01 MOV.W   #0xa500, &0x12c
     90          #endif
     91              FCTL1 = FWKEY | WRT;
   \   000010   B24040A52801 MOV.W   #0xa540, &0x128
     92              *((int16_t *) ptr) = value;         /* Program the flash */
   \   000016   8C4D0000     MOV.W   R13, 0(R12)
     93          }
   \   00001A   3041         RET
   \   00001C                REQUIRE WDTCTL
   \   00001C                REQUIRE FCTL3
   \   00001C                REQUIRE FCTL1
     94          

   \                                 In  segment CODE, align 2
     95          void flash_write_int32(int32_t *ptr, int32_t value)
   \                     flash_write_int32:
     96          {
     97              _DINT();
   \   000000   32C2         DINT
   \   000002   0343         NOP
     98              kick_watchdog();
   \   000004   B2400C5A2001 MOV.W   #0x5a0c, &0x120
     99          #if defined(__MSP430i4020__) || defined(__MSP430i2040__) || defined(__MSP430i2041__)
    100              if ((FCTL3 & LOCKSEG))
    101                  FCTL3 = FWKEY | LOCKSEG;
    102          #else
    103              FCTL3 = FWKEY;                      /* Lock = 0 */
   \   00000A   B24000A52C01 MOV.W   #0xa500, &0x12c
    104          #endif
    105              FCTL1 = FWKEY | WRT;
   \   000010   B24040A52801 MOV.W   #0xa540, &0x128
    106              *((int32_t *) ptr) = value;         /* Program the flash */
   \   000016   8C4E0000     MOV.W   R14, 0(R12)
   \   00001A   8C4F0200     MOV.W   R15, 0x2(R12)
    107          }
   \   00001E   3041         RET
   \   000020                REQUIRE WDTCTL
   \   000020                REQUIRE FCTL3
   \   000020                REQUIRE FCTL1
    108          

   \                                 In  segment CODE, align 2
    109          void flash_memcpy(void *to, const void *from, int len)
   \                     flash_memcpy:
    110          {
    111              const uint8_t *fromx;
    112              uint8_t *tox;
    113          
    114              fromx = (const uint8_t *) from;
    115              tox = (uint8_t *) to;
    116              _DINT();
   \   000000   32C2         DINT
   \   000002   0343         NOP
    117              kick_watchdog();
   \   000004   B2400C5A2001 MOV.W   #0x5a0c, &0x120
    118          #if defined(__MSP430i4020__) || defined(__MSP430i2040__) || defined(__MSP430i2041__)
    119              if ((FCTL3 & LOCKSEG))
    120                  FCTL3 = FWKEY | LOCKSEG;
    121          #else
    122              FCTL3 = FWKEY;                      /* Lock = 0 */
   \   00000A   B24000A52C01 MOV.W   #0xa500, &0x12c
    123          #endif
    124              FCTL1 = FWKEY | WRT;
   \   000010   B24040A52801 MOV.W   #0xa540, &0x128
   \   000016   0E93         CMP.W   #0x0, R14
   \   000018   1C24         JEQ     ??flash_memcpy_2
   \   00001A   0F4E         MOV.W   R14, R15
   \   00001C   3FF00300     AND.W   #0x3, R15
   \   000020   4F93         CMP.B   #0x0, R15
   \   000022   0524         JEQ     ??flash_memcpy_3
    125              while (len)
    126              {
    127                  *tox++ = *fromx++;
   \                     ??flash_memcpy_0:
   \   000024   FC4D0000     MOV.B   @R13+, 0(R12)
   \   000028   1C53         ADD.W   #0x1, R12
    128                  len--;
   \   00002A   3F53         ADD.W   #0xffff, R15
   \   00002C   FB23         JNE     ??flash_memcpy_0
   \                     ??flash_memcpy_3:
   \   00002E   12C3         CLRC
   \   000030   0E10         RRC.W   R14
   \   000032   0E11         RRA.W   R14
   \   000034   0E24         JEQ     ??flash_memcpy_2
   \                     ??flash_memcpy_1:
   \   000036   FC4D0000     MOV.B   @R13+, 0(R12)
   \   00003A   1C53         ADD.W   #0x1, R12
   \   00003C   FC4D0000     MOV.B   @R13+, 0(R12)
   \   000040   1C53         ADD.W   #0x1, R12
   \   000042   FC4D0000     MOV.B   @R13+, 0(R12)
   \   000046   1C53         ADD.W   #0x1, R12
   \   000048   FC4D0000     MOV.B   @R13+, 0(R12)
   \   00004C   1C53         ADD.W   #0x1, R12
   \   00004E   3E53         ADD.W   #0xffff, R14
   \   000050   F223         JNE     ??flash_memcpy_1
    129              }
    130          }
   \                     ??flash_memcpy_2:
   \   000052   3041         RET
   \   000054                REQUIRE WDTCTL
   \   000054                REQUIRE FCTL3
   \   000054                REQUIRE FCTL1
    131          
    132          /************************************************************************
    133              This routine makes the flash looks like EEPROM. It will erase and
    134              replace just one word
    135              This routine copies will erase SEGA and then image SEGB to SEGA
    136              It will then erase SEGB and copy from SEGA back to SEGB all 128 bytes
    137              except the one to be replaced.
    138          ************************************************************************/

   \                                 In  segment CODE, align 2
    139          void flash_replace16(int16_t *ptr, int16_t word)
   \                     flash_replace16:
    140          {
   \   000000   0A12         PUSH.W  R10
   \   000002   0B12         PUSH.W  R11
   \   000004   0812         PUSH.W  R8
   \   000006   0912         PUSH.W  R9
    141              int *read_ptr;
    142              int *write_ptr;
    143              int w;
    144            
    145              /* Optimise the case where the new and old values are the same */
    146              if (*ptr == word)
   \   000008   8C9D0000     CMP.W   R13, 0(R12)
   \   00000C   7D24         JEQ     ??flash_replace16_3
    147                  return;
    148              flash_clr((int *) FSEG_A);
   \   00000E   3F400C5A     MOV.W   #0x5a0c, R15
   \   000012   824F2001     MOV.W   R15, &0x120
   \   000016   32C2         DINT
   \   000018   0343         NOP
   \   00001A   3E4000A5     MOV.W   #0xa500, R14
   \   00001E   824E2C01     MOV.W   R14, &0x12c
   \   000022   B24002A52801 MOV.W   #0xa502, &0x128
   \   000028   82438010     MOV.W   #0x0, &0x1080
   \   00002C   32D2         EINT
    149          
    150              _DINT();
   \   00002E   32C2         DINT
   \   000030   0343         NOP
    151              kick_watchdog();
   \   000032   824F2001     MOV.W   R15, &0x120
    152              /* Set to write mode to prepare for copy */
    153          #if defined(__MSP430i4020__) || defined(__MSP430i2040__) || defined(__MSP430i2041__)
    154              if ((FCTL3 & LOCKSEG))
    155                  FCTL3 = FWKEY | LOCKSEG;
    156          #else
    157              FCTL3 = FWKEY;                      /* Lock = 0 */
   \   000036   824E2C01     MOV.W   R14, &0x12c
    158          #endif
    159              FCTL1 = FWKEY | WRT;
   \   00003A   B24040A52801 MOV.W   #0xa540, &0x128
    160          
    161              /* Copy block B to A */
    162              read_ptr = (int *) FSEG_B;
   \   000040   3A400010     MOV.W   #0x1000, R10
    163              write_ptr = (int *) FSEG_A;
   \   000044   3B408010     MOV.W   #0x1080, R11
    164              for (w = 0;  w < 64;  w++)
   \   000048   78401000     MOV.B   #0x10, R8
    165                  *write_ptr++ = *read_ptr++;
   \                     ??flash_replace16_0:
   \   00004C   BB4A0000     MOV.W   @R10+, 0(R11)
   \   000050   2B53         ADD.W   #0x2, R11
   \   000052   BB4A0000     MOV.W   @R10+, 0(R11)
   \   000056   2B53         ADD.W   #0x2, R11
   \   000058   BB4A0000     MOV.W   @R10+, 0(R11)
   \   00005C   2B53         ADD.W   #0x2, R11
   \   00005E   BB4A0000     MOV.W   @R10+, 0(R11)
   \   000062   2B53         ADD.W   #0x2, R11
   \   000064   7853         ADD.B   #0xff, R8
   \   000066   F223         JNE     ??flash_replace16_0
    166          
    167              flash_clr((int *) FSEG_B);
   \   000068   824F2001     MOV.W   R15, &0x120
   \   00006C   32C2         DINT
   \   00006E   0343         NOP
   \   000070   824E2C01     MOV.W   R14, &0x12c
   \   000074   B24002A52801 MOV.W   #0xa502, &0x128
   \   00007A   82430010     MOV.W   #0x0, &0x1000
   \   00007E   32D2         EINT
    168          
    169              _DINT();
   \   000080   32C2         DINT
   \   000082   0343         NOP
    170              kick_watchdog();
   \   000084   824F2001     MOV.W   R15, &0x120
    171              /* Set to write mode to prepare for copy */
    172          #if defined(__MSP430i4020__) || defined(__MSP430i2040__) || defined(__MSP430i2041__)
    173              if ((FCTL3 & LOCKSEG))
    174                  FCTL3 = FWKEY | LOCKSEG;
    175          #else
    176              FCTL3 = FWKEY;                      /* Lock = 0 */
   \   000088   824E2C01     MOV.W   R14, &0x12c
    177          #endif
    178              FCTL1 = FWKEY | WRT;
   \   00008C   B24040A52801 MOV.W   #0xa540, &0x128
    179          
    180              /* Copy block A to B, slipping in the new value at the right location */
    181              read_ptr = (int *) FSEG_A;
   \   000092   3A408010     MOV.W   #0x1080, R10
    182              write_ptr = (int *) FSEG_B;
   \   000096   3B400010     MOV.W   #0x1000, R11
    183              for (w = 0;  w < 64;  w++, read_ptr++, write_ptr++)
   \   00009A   0843         MOV.W   #0x0, R8
    184              {
    185                  if (write_ptr == ptr)
   \                     ??flash_replace16_1:
   \   00009C   0B9C         CMP.W   R12, R11
   \   00009E   0220         JNE     ??flash_replace16_4
    186                      *write_ptr = word;
   \   0000A0   094D         MOV.W   R13, R9
   \   0000A2   013C         JMP     ??flash_replace16_5
    187                  else
    188                      *write_ptr = *read_ptr;
   \                     ??flash_replace16_4:
   \   0000A4   294A         MOV.W   @R10, R9
   \                     ??flash_replace16_5:
   \   0000A6   8B490000     MOV.W   R9, 0(R11)
   \   0000AA   1853         ADD.W   #0x1, R8
   \   0000AC   2A53         ADD.W   #0x2, R10
   \   0000AE   2B53         ADD.W   #0x2, R11
   \   0000B0   0B9C         CMP.W   R12, R11
   \   0000B2   0220         JNE     ??flash_replace16_6
   \   0000B4   094D         MOV.W   R13, R9
   \   0000B6   013C         JMP     ??flash_replace16_7
   \                     ??flash_replace16_6:
   \   0000B8   294A         MOV.W   @R10, R9
   \                     ??flash_replace16_7:
   \   0000BA   8B490000     MOV.W   R9, 0(R11)
   \   0000BE   1853         ADD.W   #0x1, R8
   \   0000C0   2A53         ADD.W   #0x2, R10
   \   0000C2   2B53         ADD.W   #0x2, R11
   \   0000C4   0B9C         CMP.W   R12, R11
   \   0000C6   0220         JNE     ??flash_replace16_8
   \   0000C8   094D         MOV.W   R13, R9
   \   0000CA   013C         JMP     ??flash_replace16_9
   \                     ??flash_replace16_8:
   \   0000CC   294A         MOV.W   @R10, R9
   \                     ??flash_replace16_9:
   \   0000CE   8B490000     MOV.W   R9, 0(R11)
   \   0000D2   1853         ADD.W   #0x1, R8
   \   0000D4   2A53         ADD.W   #0x2, R10
   \   0000D6   2B53         ADD.W   #0x2, R11
   \   0000D8   0B9C         CMP.W   R12, R11
   \   0000DA   0220         JNE     ??flash_replace16_10
   \   0000DC   094D         MOV.W   R13, R9
   \   0000DE   013C         JMP     ??flash_replace16_11
   \                     ??flash_replace16_10:
   \   0000E0   294A         MOV.W   @R10, R9
   \                     ??flash_replace16_11:
   \   0000E2   8B490000     MOV.W   R9, 0(R11)
    189              }
   \   0000E6   1853         ADD.W   #0x1, R8
   \   0000E8   2A53         ADD.W   #0x2, R10
   \   0000EA   2B53         ADD.W   #0x2, R11
   \   0000EC   38904000     CMP.W   #0x40, R8
   \   0000F0   D53B         JL      ??flash_replace16_1
    190              flash_secure();
   \   0000F2   32C2         DINT
   \   0000F4   0343         NOP
   \   0000F6   824F2001     MOV.W   R15, &0x120
   \   0000FA   824E2801     MOV.W   R14, &0x128
   \   0000FE   B24010A52C01 MOV.W   #0xa510, &0x12c
   \   000104   32D2         EINT
    191              _EINT();
   \   000106   32D2         EINT
    192          }
   \                     ??flash_replace16_3:
   \   000108   3040....     BR      #?Epilogue4
   \   00010C                REQUIRE WDTCTL
   \   00010C                REQUIRE FCTL3
   \   00010C                REQUIRE FCTL1
    193          
    194          /***********************************************************************
    195              This routine makes the flash looks like EEPROM. It will erase and
    196              replace just one long word.
    197              This routine copies will erase SEGA and then image SEGB to SEGA
    198              It will then erase SEGB and copy from SEGA back to SEGB all 128 bytes
    199              except the one to be replaced.
    200          ***********************************************************************/

   \                                 In  segment CODE, align 2
    201          void flash_replace32(int32_t *ptr, int32_t word)
   \                     flash_replace32:
    202          {
   \   000000   0A12         PUSH.W  R10
   \   000002   0B12         PUSH.W  R11
   \   000004   0812         PUSH.W  R8
   \   000006   0912         PUSH.W  R9
    203              int *read_ptr;
    204              int *write_ptr;
    205              int w;
    206          
    207              /* Optimise the case where the new and old values are the same */
    208              if (*ptr == word)
   \   000008   8C9E0000     CMP.W   R14, 0(R12)
   \   00000C   0320         JNE     ??flash_replace32_2
   \   00000E   8C9F0200     CMP.W   R15, 0x2(R12)
   \   000012   6424         JEQ     ??flash_replace32_3
    209                  return;
    210              flash_clr((int *) FSEG_A);
   \                     ??flash_replace32_2:
   \   000014   3D400C5A     MOV.W   #0x5a0c, R13
   \   000018   824D2001     MOV.W   R13, &0x120
   \   00001C   32C2         DINT
   \   00001E   0343         NOP
   \   000020   3A4000A5     MOV.W   #0xa500, R10
   \   000024   824A2C01     MOV.W   R10, &0x12c
   \   000028   B24002A52801 MOV.W   #0xa502, &0x128
   \   00002E   82438010     MOV.W   #0x0, &0x1080
   \   000032   32D2         EINT
    211          
    212              _DINT();
   \   000034   32C2         DINT
   \   000036   0343         NOP
    213              kick_watchdog();
   \   000038   824D2001     MOV.W   R13, &0x120
    214              /* Set to write mode to prepare for copy */
    215          #if defined(__MSP430i4020__) || defined(__MSP430i2040__) || defined(__MSP430i2041__)
    216              if ((FCTL3 & LOCKSEG))
    217                  FCTL3 = FWKEY | LOCKSEG;
    218          #else
    219              FCTL3 = FWKEY;                      /* Lock = 0 */
   \   00003C   824A2C01     MOV.W   R10, &0x12c
    220          #endif
    221              FCTL1 = FWKEY | WRT;
   \   000040   B24040A52801 MOV.W   #0xa540, &0x128
    222          
    223              /* Copy block B to A */
    224              read_ptr = (int *) FSEG_B;
   \   000046   3B400010     MOV.W   #0x1000, R11
    225              write_ptr = (int *) FSEG_A;
   \   00004A   38408010     MOV.W   #0x1080, R8
    226              for (w = 0;  w < 64;  w++)
   \   00004E   79401000     MOV.B   #0x10, R9
    227                  *write_ptr++ = *read_ptr++;
   \                     ??flash_replace32_0:
   \   000052   B84B0000     MOV.W   @R11+, 0(R8)
   \   000056   2853         ADD.W   #0x2, R8
   \   000058   B84B0000     MOV.W   @R11+, 0(R8)
   \   00005C   2853         ADD.W   #0x2, R8
   \   00005E   B84B0000     MOV.W   @R11+, 0(R8)
   \   000062   2853         ADD.W   #0x2, R8
   \   000064   B84B0000     MOV.W   @R11+, 0(R8)
   \   000068   2853         ADD.W   #0x2, R8
   \   00006A   7953         ADD.B   #0xff, R9
   \   00006C   F223         JNE     ??flash_replace32_0
    228          
    229              flash_clr((int *) FSEG_B);
   \   00006E   824D2001     MOV.W   R13, &0x120
   \   000072   32C2         DINT
   \   000074   0343         NOP
   \   000076   824A2C01     MOV.W   R10, &0x12c
   \   00007A   B24002A52801 MOV.W   #0xa502, &0x128
   \   000080   82430010     MOV.W   #0x0, &0x1000
   \   000084   32D2         EINT
    230          
    231              _DINT();
   \   000086   32C2         DINT
   \   000088   0343         NOP
    232              kick_watchdog();
   \   00008A   824D2001     MOV.W   R13, &0x120
    233              /* Set to write mode to prepare for copy */
    234          #if defined(__MSP430i4020__) || defined(__MSP430i2040__) || defined(__MSP430i2041__)
    235              if ((FCTL3 & LOCKSEG))
    236                  FCTL3 = FWKEY | LOCKSEG;
    237          #else
    238              FCTL3 = FWKEY;                      /* Lock = 0 */
   \   00008E   824A2C01     MOV.W   R10, &0x12c
    239          #endif
    240              FCTL1 = FWKEY | WRT;
   \   000092   B24040A52801 MOV.W   #0xa540, &0x128
    241          
    242              /* Copy block A to B, slipping in the new value at the right location */
    243              read_ptr = (int *) FSEG_A;
   \   000098   3B408010     MOV.W   #0x1080, R11
    244              write_ptr = (int *) FSEG_B;
   \   00009C   38400010     MOV.W   #0x1000, R8
    245              for (w = 0;  w < 64;  w++, read_ptr++, write_ptr++)
   \   0000A0   0943         MOV.W   #0x0, R9
    246              {
    247                  if (write_ptr == (int *) ptr)
   \                     ??flash_replace32_1:
   \   0000A2   089C         CMP.W   R12, R8
   \   0000A4   0820         JNE     ??flash_replace32_4
    248                  {
    249                      *ptr = word;
   \   0000A6   8C4E0000     MOV.W   R14, 0(R12)
   \   0000AA   8C4F0200     MOV.W   R15, 0x2(R12)
    250                      /* Bump the counter to allow for just writing a double word. */
    251                      w++;
   \   0000AE   1953         ADD.W   #0x1, R9
    252                      read_ptr++;
   \   0000B0   2B53         ADD.W   #0x2, R11
    253                      write_ptr++;
   \   0000B2   2853         ADD.W   #0x2, R8
   \   0000B4   023C         JMP     ??flash_replace32_5
    254                  }
    255                  else
    256                  {
    257                      *write_ptr = *read_ptr;
   \                     ??flash_replace32_4:
   \   0000B6   A84B0000     MOV.W   @R11, 0(R8)
    258                  }
    259              }
   \                     ??flash_replace32_5:
   \   0000BA   1953         ADD.W   #0x1, R9
   \   0000BC   2B53         ADD.W   #0x2, R11
   \   0000BE   2853         ADD.W   #0x2, R8
   \   0000C0   39904000     CMP.W   #0x40, R9
   \   0000C4   EE3B         JL      ??flash_replace32_1
    260              flash_secure();
   \   0000C6   32C2         DINT
   \   0000C8   0343         NOP
   \   0000CA   824D2001     MOV.W   R13, &0x120
   \   0000CE   824A2801     MOV.W   R10, &0x128
   \   0000D2   B24010A52C01 MOV.W   #0xa510, &0x12c
   \   0000D8   32D2         EINT
    261              _EINT();
   \   0000DA   32D2         EINT
    262          }
   \                     ??flash_replace32_3:
   \   0000DC   3040....     BR      #?Epilogue4
   \   0000E0                REQUIRE WDTCTL
   \   0000E0                REQUIRE FCTL3
   \   0000E0                REQUIRE FCTL1
    263          

   \                                 In  segment CODE, align 2
    264          void flash_secure(void)
   \                     flash_secure:
    265          {
    266              _DINT();
   \   000000   32C2         DINT
   \   000002   0343         NOP
    267              kick_watchdog();
   \   000004   B2400C5A2001 MOV.W   #0x5a0c, &0x120
    268              FCTL1 = FWKEY;                      /* Erase, write = 0 */
   \   00000A   B24000A52801 MOV.W   #0xa500, &0x128
    269          #if defined(__MSP430i4020__) || defined(__MSP430i2040__) || defined(__MSP430i2041__)
    270              if (!(FCTL3 & LOCKSEG))
    271                  FCTL3 = FWKEY | LOCKSEG;
    272          #else
    273              FCTL3 = FWKEY | LOCK;               /* Lock = 1 */
   \   000010   B24010A52C01 MOV.W   #0xa510, &0x12c
    274          #endif
    275              _EINT();
   \   000016   32D2         EINT
    276          }
   \   000018   3041         RET
   \   00001A                REQUIRE WDTCTL
   \   00001A                REQUIRE FCTL1
   \   00001A                REQUIRE FCTL3
    277          #endif

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      2   flash_clr
      2   flash_memcpy
     10   flash_replace16
     10   flash_replace32
      2   flash_secure
      2   flash_write_int16
      2   flash_write_int32
      2   flash_write_int8


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  FCTL1
       2  FCTL3
       2  WDTCTL
      30  flash_clr
      84  flash_memcpy
     268  flash_replace16
     224  flash_replace32
      26  flash_secure
      28  flash_write_int16
      32  flash_write_int32
      28  flash_write_int8

 
 720 bytes in segment CODE
   6 bytes in segment DATA16_AN
 
 720 bytes of CODE memory
   0 bytes of DATA memory (+ 6 bytes shared)

Errors: none
Warnings: none
