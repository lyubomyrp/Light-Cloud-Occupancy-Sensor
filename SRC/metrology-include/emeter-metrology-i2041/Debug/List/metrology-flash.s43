///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V5.52.1.50724/W32 for MSP430      07/Jul/2014  17:16:18 /
// Copyright 1996-2013 IAR Systems AB.                                        /
//                                                                            /
//    __rt_version  =  3                                                      /
//    __double_size =  32                                                     /
//    __reg_r4      =  free                                                   /
//    __reg_r5      =  free                                                   /
//    __pic         =  no                                                     /
//    __core        =  430                                                    /
//    Source file   =  C:\Users\a0283112\Desktop\Submeter i2040               /
//                     8k_DC_THD_AUTO_OSR_IAR5.5\emeter-metrology\src\metrolo /
//                     gy-flash.c                                             /
//    Command line  =  "C:\Users\a0283112\Desktop\Submeter i2040              /
//                     8k_DC_THD_AUTO_OSR_IAR5.5\emeter-metrology\src\metrolo /
//                     gy-flash.c" -D __MSP430__ -lCN                         /
//                     "C:\Users\a0283112\Desktop\Submeter i2040              /
//                     8k_DC_THD_AUTO_OSR_IAR5.5\emeter-metrology\emeter-metr /
//                     ology-i2041\Debug\List\" -lA                           /
//                     "C:\Users\a0283112\Desktop\Submeter i2040              /
//                     8k_DC_THD_AUTO_OSR_IAR5.5\emeter-metrology\emeter-metr /
//                     ology-i2041\Debug\List\" -o                            /
//                     "C:\Users\a0283112\Desktop\Submeter i2040              /
//                     8k_DC_THD_AUTO_OSR_IAR5.5\emeter-metrology\emeter-metr /
//                     ology-i2041\Debug\Obj\" --debug -D__MSP430I2041__ -e   /
//                     --double=32 --dlib_config "C:\Program Files (x86)\IAR  /
//                     Systems\Embedded Workbench                             /
//                     6.5_0\430\LIB\DLIB\dl430fn.h" --library_module -I      /
//                     "C:\Users\a0283112\Desktop\Submeter i2040              /
//                     8k_DC_THD_AUTO_OSR_IAR5.5\emeter-metrology\emeter-metr /
//                     ology-i2041/../../emeter-toolkit/include\" -I          /
//                     "C:\Users\a0283112\Desktop\Submeter i2040              /
//                     8k_DC_THD_AUTO_OSR_IAR5.5\emeter-metrology\emeter-metr /
//                     ology-i2041/../include\" -I                            /
//                     "C:\Users\a0283112\Desktop\Submeter i2040              /
//                     8k_DC_THD_AUTO_OSR_IAR5.5\emeter-metrology\emeter-metr /
//                     ology-i2041\" -Ohs --multiplier=16s                    /
//    List file     =  C:\Users\a0283112\Desktop\Submeter i2040               /
//                     8k_DC_THD_AUTO_OSR_IAR5.5\emeter-metrology\emeter-metr /
//                     ology-i2041\Debug\List\metrology-flash.s43             /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        MODULE `metrology-flash`

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__core", "430"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?Epilogue4
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBWEAK FCTL1
        PUBWEAK FCTL3
        PUBWEAK WDTCTL
        PUBLIC flash_clr
        FUNCTION flash_clr,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 2, STACK
        PUBLIC flash_memcpy
        FUNCTION flash_memcpy,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 2, STACK
        PUBLIC flash_replace16
        FUNCTION flash_replace16,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 10, STACK
        PUBLIC flash_replace32
        FUNCTION flash_replace32,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 10, STACK
        PUBLIC flash_secure
        FUNCTION flash_secure,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 2, STACK
        PUBLIC flash_write_int16
        FUNCTION flash_write_int16,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 2, STACK
        PUBLIC flash_write_int32
        FUNCTION flash_write_int32,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 2, STACK
        PUBLIC flash_write_int8
        FUNCTION flash_write_int8,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 2, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:16, SP:16, SR:16, R4:16, R5:16, R6:16, R7:16, R8:16
          CFI Resource R9:16, R10:16, R11:16, R12:16, R13:16, R14:16, R15:16
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+2
          CFI PC Frame(CFA, -2)
          CFI SR Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 Undefined
          CFI R13 Undefined
          CFI R14 Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
// C:\Users\a0283112\Desktop\Submeter i2040 8k_DC_THD_AUTO_OSR_IAR5.5\emeter-metrology\src\metrology-flash.c
//    1 /*******************************************************************************
//    2  *  metrology-flash.c - Flash reading and writing routines.
//    3  *
//    4  *  Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/ 
//    5  * 
//    6  *  Redistribution and use in source and binary forms, with or without 
//    7  *  modification, are permitted provided that the following conditions 
//    8  *  are met:
//    9  *
//   10  *    Redistributions of source code must retain the above copyright 
//   11  *    notice, this list of conditions and the following disclaimer.
//   12  *
//   13  *    Redistributions in binary form must reproduce the above copyright
//   14  *    notice, this list of conditions and the following disclaimer in the 
//   15  *    documentation and/or other materials provided with the   
//   16  *    distribution.
//   17  *
//   18  *    Neither the name of Texas Instruments Incorporated nor the names of
//   19  *    its contributors may be used to endorse or promote products derived
//   20  *    from this software without specific prior written permission.
//   21  *
//   22  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
//   23  *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
//   24  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//   25  *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
//   26  *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//   27  *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
//   28  *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//   29  *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//   30  *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
//   31  *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
//   32  *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//   33  *
//   34  ******************************************************************************/
//   35 
//   36 #include <signal.h>
//   37 #include <inttypes.h>
//   38 #if defined(__MSP430__)
//   39 #include <msp430.h>

        ASEGN DATA16_AN:DATA:NOROOT,0128H
// unsigned short volatile FCTL1
FCTL1:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,012cH
// unsigned short volatile FCTL3
FCTL3:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0120H
// unsigned short volatile WDTCTL
WDTCTL:
        DS8 2
//   40 #endif
//   41 #include <emeter-toolkit.h>
//   42 
//   43 #include "metrology-flash.h"
//   44 
//   45 #if defined(__MSP430__)
//   46 #define FSEG_A 0x01080      /* Flash Segment A start address */
//   47 #define FSEG_B 0x01000      /* Flash Segment B start address */
//   48 
//   49 #define kick_watchdog()             WDTCTL = WDT_ARST_1000
//   50 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   51 void flash_clr(int *ptr)
flash_clr:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function flash_clr
//   52 {
//   53     kick_watchdog();
        MOV.W   #0x5a0c, &0x120
//   54    
//   55     _DINT();
        DINT
        NOP
//   56 #if defined(__MSP430i4020__) || defined(__MSP430i2040__) || defined(__MSP430i2041__)
//   57     if ((FCTL3 & LOCKSEG))
//   58         FCTL3 = FWKEY | LOCKSEG;
//   59 #else
//   60     FCTL3 = FWKEY;                      /* Lock = 0 */
        MOV.W   #0xa500, &0x12c
//   61 #endif
//   62     FCTL1 = FWKEY | ERASE;
        MOV.W   #0xa502, &0x128
//   63     *((int *) ptr) = 0;                 /* Erase flash segment */
        MOV.W   #0x0, 0(R12)
//   64     _EINT();
        EINT
//   65 }
        RET
          CFI EndBlock cfiBlock0
        REQUIRE WDTCTL
        REQUIRE FCTL3
        REQUIRE FCTL1
//   66 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   67 void flash_write_int8(int8_t *ptr, int8_t value)
flash_write_int8:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function flash_write_int8
//   68 {
//   69     _DINT();
        DINT
        NOP
//   70     kick_watchdog();
        MOV.W   #0x5a0c, &0x120
//   71 #if defined(__MSP430i4020__) || defined(__MSP430i2040__) || defined(__MSP430i2041__)
//   72     if ((FCTL3 & LOCKSEG))
//   73         FCTL3 = FWKEY | LOCKSEG;
//   74 #else
//   75     FCTL3 = FWKEY;                      /* Lock = 0 */
        MOV.W   #0xa500, &0x12c
//   76 #endif
//   77     FCTL1 = LOCK | WRT;
        MOV.W   #0x50, &0x128
//   78     *((int8_t *) ptr) = value;          /* Program the flash */
        MOV.B   R13, 0(R12)
//   79 }
        RET
          CFI EndBlock cfiBlock1
        REQUIRE WDTCTL
        REQUIRE FCTL3
        REQUIRE FCTL1
//   80 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   81 void flash_write_int16(int16_t *ptr, int16_t value)
flash_write_int16:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function flash_write_int16
//   82 {
//   83     _DINT();
        DINT
        NOP
//   84     kick_watchdog();
        MOV.W   #0x5a0c, &0x120
//   85 #if defined(__MSP430i4020__) || defined(__MSP430i2040__) || defined(__MSP430i2041__)
//   86     if ((FCTL3 & LOCKSEG))
//   87         FCTL3 = FWKEY | LOCKSEG;
//   88 #else
//   89     FCTL3 = FWKEY;                      /* Lock = 0 */
        MOV.W   #0xa500, &0x12c
//   90 #endif
//   91     FCTL1 = FWKEY | WRT;
        MOV.W   #0xa540, &0x128
//   92     *((int16_t *) ptr) = value;         /* Program the flash */
        MOV.W   R13, 0(R12)
//   93 }
        RET
          CFI EndBlock cfiBlock2
        REQUIRE WDTCTL
        REQUIRE FCTL3
        REQUIRE FCTL1
//   94 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   95 void flash_write_int32(int32_t *ptr, int32_t value)
flash_write_int32:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function flash_write_int32
//   96 {
//   97     _DINT();
        DINT
        NOP
//   98     kick_watchdog();
        MOV.W   #0x5a0c, &0x120
//   99 #if defined(__MSP430i4020__) || defined(__MSP430i2040__) || defined(__MSP430i2041__)
//  100     if ((FCTL3 & LOCKSEG))
//  101         FCTL3 = FWKEY | LOCKSEG;
//  102 #else
//  103     FCTL3 = FWKEY;                      /* Lock = 0 */
        MOV.W   #0xa500, &0x12c
//  104 #endif
//  105     FCTL1 = FWKEY | WRT;
        MOV.W   #0xa540, &0x128
//  106     *((int32_t *) ptr) = value;         /* Program the flash */
        MOV.W   R14, 0(R12)
        MOV.W   R15, 0x2(R12)
//  107 }
        RET
          CFI EndBlock cfiBlock3
        REQUIRE WDTCTL
        REQUIRE FCTL3
        REQUIRE FCTL1
//  108 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  109 void flash_memcpy(void *to, const void *from, int len)
flash_memcpy:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function flash_memcpy
//  110 {
//  111     const uint8_t *fromx;
//  112     uint8_t *tox;
//  113 
//  114     fromx = (const uint8_t *) from;
//  115     tox = (uint8_t *) to;
//  116     _DINT();
        DINT
        NOP
//  117     kick_watchdog();
        MOV.W   #0x5a0c, &0x120
//  118 #if defined(__MSP430i4020__) || defined(__MSP430i2040__) || defined(__MSP430i2041__)
//  119     if ((FCTL3 & LOCKSEG))
//  120         FCTL3 = FWKEY | LOCKSEG;
//  121 #else
//  122     FCTL3 = FWKEY;                      /* Lock = 0 */
        MOV.W   #0xa500, &0x12c
//  123 #endif
//  124     FCTL1 = FWKEY | WRT;
        MOV.W   #0xa540, &0x128
        CMP.W   #0x0, R14
        JEQ     ??flash_memcpy_2
        MOV.W   R14, R15
        AND.W   #0x3, R15
        CMP.B   #0x0, R15
        JEQ     ??flash_memcpy_3
//  125     while (len)
//  126     {
//  127         *tox++ = *fromx++;
??flash_memcpy_0:
        MOV.B   @R13+, 0(R12)
        ADD.W   #0x1, R12
//  128         len--;
        ADD.W   #0xffff, R15
        JNE     ??flash_memcpy_0
??flash_memcpy_3:
        CLRC
        RRC.W   R14
        RRA.W   R14
        JEQ     ??flash_memcpy_2
??flash_memcpy_1:
        MOV.B   @R13+, 0(R12)
        ADD.W   #0x1, R12
        MOV.B   @R13+, 0(R12)
        ADD.W   #0x1, R12
        MOV.B   @R13+, 0(R12)
        ADD.W   #0x1, R12
        MOV.B   @R13+, 0(R12)
        ADD.W   #0x1, R12
        ADD.W   #0xffff, R14
        JNE     ??flash_memcpy_1
//  129     }
//  130 }
??flash_memcpy_2:
        RET
          CFI EndBlock cfiBlock4
        REQUIRE WDTCTL
        REQUIRE FCTL3
        REQUIRE FCTL1
//  131 
//  132 /************************************************************************
//  133     This routine makes the flash looks like EEPROM. It will erase and
//  134     replace just one word
//  135     This routine copies will erase SEGA and then image SEGB to SEGA
//  136     It will then erase SEGB and copy from SEGA back to SEGB all 128 bytes
//  137     except the one to be replaced.
//  138 ************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  139 void flash_replace16(int16_t *ptr, int16_t word)
flash_replace16:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function flash_replace16
//  140 {
        PUSH.W  R10
          CFI R10 Frame(CFA, -4)
          CFI CFA SP+4
        PUSH.W  R11
          CFI R11 Frame(CFA, -6)
          CFI CFA SP+6
        PUSH.W  R8
          CFI R8 Frame(CFA, -8)
          CFI CFA SP+8
        PUSH.W  R9
          CFI R9 Frame(CFA, -10)
          CFI CFA SP+10
//  141     int *read_ptr;
//  142     int *write_ptr;
//  143     int w;
//  144   
//  145     /* Optimise the case where the new and old values are the same */
//  146     if (*ptr == word)
        CMP.W   R13, 0(R12)
        JEQ     ??flash_replace16_3
//  147         return;
//  148     flash_clr((int *) FSEG_A);
        MOV.W   #0x5a0c, R15
        MOV.W   R15, &0x120
        DINT
        NOP
        MOV.W   #0xa500, R14
        MOV.W   R14, &0x12c
        MOV.W   #0xa502, &0x128
        MOV.W   #0x0, &0x1080
        EINT
//  149 
//  150     _DINT();
        DINT
        NOP
//  151     kick_watchdog();
        MOV.W   R15, &0x120
//  152     /* Set to write mode to prepare for copy */
//  153 #if defined(__MSP430i4020__) || defined(__MSP430i2040__) || defined(__MSP430i2041__)
//  154     if ((FCTL3 & LOCKSEG))
//  155         FCTL3 = FWKEY | LOCKSEG;
//  156 #else
//  157     FCTL3 = FWKEY;                      /* Lock = 0 */
        MOV.W   R14, &0x12c
//  158 #endif
//  159     FCTL1 = FWKEY | WRT;
        MOV.W   #0xa540, &0x128
//  160 
//  161     /* Copy block B to A */
//  162     read_ptr = (int *) FSEG_B;
        MOV.W   #0x1000, R10
//  163     write_ptr = (int *) FSEG_A;
        MOV.W   #0x1080, R11
//  164     for (w = 0;  w < 64;  w++)
        MOV.B   #0x10, R8
//  165         *write_ptr++ = *read_ptr++;
??flash_replace16_0:
        MOV.W   @R10+, 0(R11)
        ADD.W   #0x2, R11
        MOV.W   @R10+, 0(R11)
        ADD.W   #0x2, R11
        MOV.W   @R10+, 0(R11)
        ADD.W   #0x2, R11
        MOV.W   @R10+, 0(R11)
        ADD.W   #0x2, R11
        ADD.B   #0xff, R8
        JNE     ??flash_replace16_0
//  166 
//  167     flash_clr((int *) FSEG_B);
        MOV.W   R15, &0x120
        DINT
        NOP
        MOV.W   R14, &0x12c
        MOV.W   #0xa502, &0x128
        MOV.W   #0x0, &0x1000
        EINT
//  168 
//  169     _DINT();
        DINT
        NOP
//  170     kick_watchdog();
        MOV.W   R15, &0x120
//  171     /* Set to write mode to prepare for copy */
//  172 #if defined(__MSP430i4020__) || defined(__MSP430i2040__) || defined(__MSP430i2041__)
//  173     if ((FCTL3 & LOCKSEG))
//  174         FCTL3 = FWKEY | LOCKSEG;
//  175 #else
//  176     FCTL3 = FWKEY;                      /* Lock = 0 */
        MOV.W   R14, &0x12c
//  177 #endif
//  178     FCTL1 = FWKEY | WRT;
        MOV.W   #0xa540, &0x128
//  179 
//  180     /* Copy block A to B, slipping in the new value at the right location */
//  181     read_ptr = (int *) FSEG_A;
        MOV.W   #0x1080, R10
//  182     write_ptr = (int *) FSEG_B;
        MOV.W   #0x1000, R11
//  183     for (w = 0;  w < 64;  w++, read_ptr++, write_ptr++)
        MOV.W   #0x0, R8
//  184     {
//  185         if (write_ptr == ptr)
??flash_replace16_1:
        CMP.W   R12, R11
        JNE     ??flash_replace16_4
//  186             *write_ptr = word;
        MOV.W   R13, R9
        JMP     ??flash_replace16_5
//  187         else
//  188             *write_ptr = *read_ptr;
??flash_replace16_4:
        MOV.W   @R10, R9
??flash_replace16_5:
        MOV.W   R9, 0(R11)
        ADD.W   #0x1, R8
        ADD.W   #0x2, R10
        ADD.W   #0x2, R11
        CMP.W   R12, R11
        JNE     ??flash_replace16_6
        MOV.W   R13, R9
        JMP     ??flash_replace16_7
??flash_replace16_6:
        MOV.W   @R10, R9
??flash_replace16_7:
        MOV.W   R9, 0(R11)
        ADD.W   #0x1, R8
        ADD.W   #0x2, R10
        ADD.W   #0x2, R11
        CMP.W   R12, R11
        JNE     ??flash_replace16_8
        MOV.W   R13, R9
        JMP     ??flash_replace16_9
??flash_replace16_8:
        MOV.W   @R10, R9
??flash_replace16_9:
        MOV.W   R9, 0(R11)
        ADD.W   #0x1, R8
        ADD.W   #0x2, R10
        ADD.W   #0x2, R11
        CMP.W   R12, R11
        JNE     ??flash_replace16_10
        MOV.W   R13, R9
        JMP     ??flash_replace16_11
??flash_replace16_10:
        MOV.W   @R10, R9
??flash_replace16_11:
        MOV.W   R9, 0(R11)
//  189     }
        ADD.W   #0x1, R8
        ADD.W   #0x2, R10
        ADD.W   #0x2, R11
        CMP.W   #0x40, R8
        JL      ??flash_replace16_1
//  190     flash_secure();
        DINT
        NOP
        MOV.W   R15, &0x120
        MOV.W   R14, &0x128
        MOV.W   #0xa510, &0x12c
        EINT
//  191     _EINT();
        EINT
//  192 }
??flash_replace16_3:
        BR      #?Epilogue4
          CFI EndBlock cfiBlock5
        REQUIRE WDTCTL
        REQUIRE FCTL3
        REQUIRE FCTL1
//  193 
//  194 /***********************************************************************
//  195     This routine makes the flash looks like EEPROM. It will erase and
//  196     replace just one long word.
//  197     This routine copies will erase SEGA and then image SEGB to SEGA
//  198     It will then erase SEGB and copy from SEGA back to SEGB all 128 bytes
//  199     except the one to be replaced.
//  200 ***********************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  201 void flash_replace32(int32_t *ptr, int32_t word)
flash_replace32:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function flash_replace32
//  202 {
        PUSH.W  R10
          CFI R10 Frame(CFA, -4)
          CFI CFA SP+4
        PUSH.W  R11
          CFI R11 Frame(CFA, -6)
          CFI CFA SP+6
        PUSH.W  R8
          CFI R8 Frame(CFA, -8)
          CFI CFA SP+8
        PUSH.W  R9
          CFI R9 Frame(CFA, -10)
          CFI CFA SP+10
//  203     int *read_ptr;
//  204     int *write_ptr;
//  205     int w;
//  206 
//  207     /* Optimise the case where the new and old values are the same */
//  208     if (*ptr == word)
        CMP.W   R14, 0(R12)
        JNE     ??flash_replace32_2
        CMP.W   R15, 0x2(R12)
        JEQ     ??flash_replace32_3
//  209         return;
//  210     flash_clr((int *) FSEG_A);
??flash_replace32_2:
        MOV.W   #0x5a0c, R13
        MOV.W   R13, &0x120
        DINT
        NOP
        MOV.W   #0xa500, R10
        MOV.W   R10, &0x12c
        MOV.W   #0xa502, &0x128
        MOV.W   #0x0, &0x1080
        EINT
//  211 
//  212     _DINT();
        DINT
        NOP
//  213     kick_watchdog();
        MOV.W   R13, &0x120
//  214     /* Set to write mode to prepare for copy */
//  215 #if defined(__MSP430i4020__) || defined(__MSP430i2040__) || defined(__MSP430i2041__)
//  216     if ((FCTL3 & LOCKSEG))
//  217         FCTL3 = FWKEY | LOCKSEG;
//  218 #else
//  219     FCTL3 = FWKEY;                      /* Lock = 0 */
        MOV.W   R10, &0x12c
//  220 #endif
//  221     FCTL1 = FWKEY | WRT;
        MOV.W   #0xa540, &0x128
//  222 
//  223     /* Copy block B to A */
//  224     read_ptr = (int *) FSEG_B;
        MOV.W   #0x1000, R11
//  225     write_ptr = (int *) FSEG_A;
        MOV.W   #0x1080, R8
//  226     for (w = 0;  w < 64;  w++)
        MOV.B   #0x10, R9
//  227         *write_ptr++ = *read_ptr++;
??flash_replace32_0:
        MOV.W   @R11+, 0(R8)
        ADD.W   #0x2, R8
        MOV.W   @R11+, 0(R8)
        ADD.W   #0x2, R8
        MOV.W   @R11+, 0(R8)
        ADD.W   #0x2, R8
        MOV.W   @R11+, 0(R8)
        ADD.W   #0x2, R8
        ADD.B   #0xff, R9
        JNE     ??flash_replace32_0
//  228 
//  229     flash_clr((int *) FSEG_B);
        MOV.W   R13, &0x120
        DINT
        NOP
        MOV.W   R10, &0x12c
        MOV.W   #0xa502, &0x128
        MOV.W   #0x0, &0x1000
        EINT
//  230 
//  231     _DINT();
        DINT
        NOP
//  232     kick_watchdog();
        MOV.W   R13, &0x120
//  233     /* Set to write mode to prepare for copy */
//  234 #if defined(__MSP430i4020__) || defined(__MSP430i2040__) || defined(__MSP430i2041__)
//  235     if ((FCTL3 & LOCKSEG))
//  236         FCTL3 = FWKEY | LOCKSEG;
//  237 #else
//  238     FCTL3 = FWKEY;                      /* Lock = 0 */
        MOV.W   R10, &0x12c
//  239 #endif
//  240     FCTL1 = FWKEY | WRT;
        MOV.W   #0xa540, &0x128
//  241 
//  242     /* Copy block A to B, slipping in the new value at the right location */
//  243     read_ptr = (int *) FSEG_A;
        MOV.W   #0x1080, R11
//  244     write_ptr = (int *) FSEG_B;
        MOV.W   #0x1000, R8
//  245     for (w = 0;  w < 64;  w++, read_ptr++, write_ptr++)
        MOV.W   #0x0, R9
//  246     {
//  247         if (write_ptr == (int *) ptr)
??flash_replace32_1:
        CMP.W   R12, R8
        JNE     ??flash_replace32_4
//  248         {
//  249             *ptr = word;
        MOV.W   R14, 0(R12)
        MOV.W   R15, 0x2(R12)
//  250             /* Bump the counter to allow for just writing a double word. */
//  251             w++;
        ADD.W   #0x1, R9
//  252             read_ptr++;
        ADD.W   #0x2, R11
//  253             write_ptr++;
        ADD.W   #0x2, R8
        JMP     ??flash_replace32_5
//  254         }
//  255         else
//  256         {
//  257             *write_ptr = *read_ptr;
??flash_replace32_4:
        MOV.W   @R11, 0(R8)
//  258         }
//  259     }
??flash_replace32_5:
        ADD.W   #0x1, R9
        ADD.W   #0x2, R11
        ADD.W   #0x2, R8
        CMP.W   #0x40, R9
        JL      ??flash_replace32_1
//  260     flash_secure();
        DINT
        NOP
        MOV.W   R13, &0x120
        MOV.W   R10, &0x128
        MOV.W   #0xa510, &0x12c
        EINT
//  261     _EINT();
        EINT
//  262 }
??flash_replace32_3:
        BR      #?Epilogue4
          CFI EndBlock cfiBlock6
        REQUIRE WDTCTL
        REQUIRE FCTL3
        REQUIRE FCTL1
//  263 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  264 void flash_secure(void)
flash_secure:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function flash_secure
//  265 {
//  266     _DINT();
        DINT
        NOP
//  267     kick_watchdog();
        MOV.W   #0x5a0c, &0x120
//  268     FCTL1 = FWKEY;                      /* Erase, write = 0 */
        MOV.W   #0xa500, &0x128
//  269 #if defined(__MSP430i4020__) || defined(__MSP430i2040__) || defined(__MSP430i2041__)
//  270     if (!(FCTL3 & LOCKSEG))
//  271         FCTL3 = FWKEY | LOCKSEG;
//  272 #else
//  273     FCTL3 = FWKEY | LOCK;               /* Lock = 1 */
        MOV.W   #0xa510, &0x12c
//  274 #endif
//  275     _EINT();
        EINT
//  276 }
        RET
          CFI EndBlock cfiBlock7
        REQUIRE WDTCTL
        REQUIRE FCTL1
        REQUIRE FCTL3

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
//  277 #endif
// 
// 720 bytes in segment CODE
//   6 bytes in segment DATA16_AN
// 
// 720 bytes of CODE memory
//   0 bytes of DATA memory (+ 6 bytes shared)
//
//Errors: none
//Warnings: none
